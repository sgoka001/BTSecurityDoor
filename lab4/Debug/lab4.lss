
lab4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800100  00001a1e  00001ab2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000844  008001ae  008001ae  00001b60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001b60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  00001bd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000377b  00000000  00000000  00001e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001107  00000000  00000000  000055a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002157  00000000  00000000  000066aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000624  00000000  00000000  00008804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000100c  00000000  00000000  00008e28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000202a  00000000  00000000  00009e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  0000be5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	42 c1       	rjmp	.+644    	; 0x286 <__ctors_end>
       2:	00 00       	nop
       4:	5e c1       	rjmp	.+700    	; 0x2c2 <__bad_interrupt>
       6:	00 00       	nop
       8:	5c c1       	rjmp	.+696    	; 0x2c2 <__bad_interrupt>
       a:	00 00       	nop
       c:	5a c1       	rjmp	.+692    	; 0x2c2 <__bad_interrupt>
       e:	00 00       	nop
      10:	58 c1       	rjmp	.+688    	; 0x2c2 <__bad_interrupt>
      12:	00 00       	nop
      14:	56 c1       	rjmp	.+684    	; 0x2c2 <__bad_interrupt>
      16:	00 00       	nop
      18:	54 c1       	rjmp	.+680    	; 0x2c2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	52 c1       	rjmp	.+676    	; 0x2c2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	50 c1       	rjmp	.+672    	; 0x2c2 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c1       	rjmp	.+668    	; 0x2c2 <__bad_interrupt>
      26:	00 00       	nop
      28:	4c c1       	rjmp	.+664    	; 0x2c2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4a c1       	rjmp	.+660    	; 0x2c2 <__bad_interrupt>
      2e:	00 00       	nop
      30:	48 c1       	rjmp	.+656    	; 0x2c2 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 72 09 	jmp	0x12e4	; 0x12e4 <__vector_13>
      38:	44 c1       	rjmp	.+648    	; 0x2c2 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	42 c1       	rjmp	.+644    	; 0x2c2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	40 c1       	rjmp	.+640    	; 0x2c2 <__bad_interrupt>
      42:	00 00       	nop
      44:	3e c1       	rjmp	.+636    	; 0x2c2 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c1       	rjmp	.+632    	; 0x2c2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3a c1       	rjmp	.+628    	; 0x2c2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	38 c1       	rjmp	.+624    	; 0x2c2 <__bad_interrupt>
      52:	00 00       	nop
      54:	36 c1       	rjmp	.+620    	; 0x2c2 <__bad_interrupt>
      56:	00 00       	nop
      58:	34 c1       	rjmp	.+616    	; 0x2c2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	32 c1       	rjmp	.+612    	; 0x2c2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	30 c1       	rjmp	.+608    	; 0x2c2 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c1       	rjmp	.+604    	; 0x2c2 <__bad_interrupt>
      66:	00 00       	nop
      68:	2c c1       	rjmp	.+600    	; 0x2c2 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2a c1       	rjmp	.+596    	; 0x2c2 <__bad_interrupt>
      6e:	00 00       	nop
      70:	28 c1       	rjmp	.+592    	; 0x2c2 <__bad_interrupt>
      72:	00 00       	nop
      74:	26 c1       	rjmp	.+588    	; 0x2c2 <__bad_interrupt>
      76:	00 00       	nop
      78:	24 c1       	rjmp	.+584    	; 0x2c2 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	22 c1       	rjmp	.+580    	; 0x2c2 <__bad_interrupt>
      7e:	00 00       	nop
      80:	20 c1       	rjmp	.+576    	; 0x2c2 <__bad_interrupt>
      82:	00 00       	nop
      84:	1e c1       	rjmp	.+572    	; 0x2c2 <__bad_interrupt>
      86:	00 00       	nop
      88:	1c c1       	rjmp	.+568    	; 0x2c2 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	45 04       	cpc	r4, r5
      8e:	4c 04       	cpc	r4, r12
      90:	61 04       	cpc	r6, r1
      92:	6f 04       	cpc	r6, r15
      94:	86 04       	cpc	r8, r6
      96:	94 04       	cpc	r9, r4
      98:	a2 04       	cpc	r10, r2
      9a:	b0 04       	cpc	r11, r0
      9c:	c7 04       	cpc	r12, r7
      9e:	d5 04       	cpc	r13, r5
      a0:	ec 04       	cpc	r14, r12
      a2:	03 05       	cpc	r16, r3
      a4:	f5 04       	cpc	r15, r5

000000a6 <CHARSET>:
      a6:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
      b6:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
      c6:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
      d6:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
      e6:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
      f6:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     106:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     116:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     126:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     136:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     146:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     156:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     166:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     176:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     186:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     196:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1a6:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     1b6:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     1c6:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     1d6:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     1e6:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     1f6:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     206:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     216:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     226:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     236:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     246:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     256:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     266:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     276:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

00000286 <__ctors_end>:
     286:	11 24       	eor	r1, r1
     288:	1f be       	out	0x3f, r1	; 63
     28a:	cf ef       	ldi	r28, 0xFF	; 255
     28c:	d0 e4       	ldi	r29, 0x40	; 64
     28e:	de bf       	out	0x3e, r29	; 62
     290:	cd bf       	out	0x3d, r28	; 61

00000292 <__do_copy_data>:
     292:	11 e0       	ldi	r17, 0x01	; 1
     294:	a0 e0       	ldi	r26, 0x00	; 0
     296:	b1 e0       	ldi	r27, 0x01	; 1
     298:	ee e1       	ldi	r30, 0x1E	; 30
     29a:	fa e1       	ldi	r31, 0x1A	; 26
     29c:	00 e0       	ldi	r16, 0x00	; 0
     29e:	0b bf       	out	0x3b, r16	; 59
     2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <__do_copy_data+0x14>
     2a2:	07 90       	elpm	r0, Z+
     2a4:	0d 92       	st	X+, r0
     2a6:	ae 3a       	cpi	r26, 0xAE	; 174
     2a8:	b1 07       	cpc	r27, r17
     2aa:	d9 f7       	brne	.-10     	; 0x2a2 <__do_copy_data+0x10>

000002ac <__do_clear_bss>:
     2ac:	29 e0       	ldi	r18, 0x09	; 9
     2ae:	ae ea       	ldi	r26, 0xAE	; 174
     2b0:	b1 e0       	ldi	r27, 0x01	; 1
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <.do_clear_bss_start>

000002b4 <.do_clear_bss_loop>:
     2b4:	1d 92       	st	X+, r1

000002b6 <.do_clear_bss_start>:
     2b6:	a2 3f       	cpi	r26, 0xF2	; 242
     2b8:	b2 07       	cpc	r27, r18
     2ba:	e1 f7       	brne	.-8      	; 0x2b4 <.do_clear_bss_loop>
     2bc:	a4 d6       	rcall	.+3400   	; 0x1006 <main>
     2be:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <_exit>

000002c2 <__bad_interrupt>:
     2c2:	9e ce       	rjmp	.-708    	; 0x0 <__vectors>

000002c4 <pvPortMalloc>:
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	ec 01       	movw	r28, r24
     2ca:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <vTaskSuspendAll>
     2ce:	20 91 ae 01 	lds	r18, 0x01AE	; 0x8001ae <__data_end>
     2d2:	30 91 af 01 	lds	r19, 0x01AF	; 0x8001af <__data_end+0x1>
     2d6:	c9 01       	movw	r24, r18
     2d8:	8c 0f       	add	r24, r28
     2da:	9d 1f       	adc	r25, r29
     2dc:	8c 3d       	cpi	r24, 0xDC	; 220
     2de:	45 e0       	ldi	r20, 0x05	; 5
     2e0:	94 07       	cpc	r25, r20
     2e2:	58 f4       	brcc	.+22     	; 0x2fa <pvPortMalloc+0x36>
     2e4:	28 17       	cp	r18, r24
     2e6:	39 07       	cpc	r19, r25
     2e8:	58 f4       	brcc	.+22     	; 0x300 <pvPortMalloc+0x3c>
     2ea:	e9 01       	movw	r28, r18
     2ec:	c0 55       	subi	r28, 0x50	; 80
     2ee:	de 4f       	sbci	r29, 0xFE	; 254
     2f0:	90 93 af 01 	sts	0x01AF, r25	; 0x8001af <__data_end+0x1>
     2f4:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <__data_end>
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <pvPortMalloc+0x40>
     2fa:	c0 e0       	ldi	r28, 0x00	; 0
     2fc:	d0 e0       	ldi	r29, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <pvPortMalloc+0x40>
     300:	c0 e0       	ldi	r28, 0x00	; 0
     302:	d0 e0       	ldi	r29, 0x00	; 0
     304:	0e 94 9d 0b 	call	0x173a	; 0x173a <xTaskResumeAll>
     308:	ce 01       	movw	r24, r28
     30a:	df 91       	pop	r29
     30c:	cf 91       	pop	r28
     30e:	08 95       	ret

00000310 <vPortFree>:
     310:	08 95       	ret

00000312 <vListInitialise>:
     312:	fc 01       	movw	r30, r24
     314:	03 96       	adiw	r24, 0x03	; 3
     316:	92 83       	std	Z+2, r25	; 0x02
     318:	81 83       	std	Z+1, r24	; 0x01
     31a:	2f ef       	ldi	r18, 0xFF	; 255
     31c:	3f ef       	ldi	r19, 0xFF	; 255
     31e:	34 83       	std	Z+4, r19	; 0x04
     320:	23 83       	std	Z+3, r18	; 0x03
     322:	96 83       	std	Z+6, r25	; 0x06
     324:	85 83       	std	Z+5, r24	; 0x05
     326:	90 87       	std	Z+8, r25	; 0x08
     328:	87 83       	std	Z+7, r24	; 0x07
     32a:	10 82       	st	Z, r1
     32c:	08 95       	ret

0000032e <vListInitialiseItem>:
     32e:	fc 01       	movw	r30, r24
     330:	11 86       	std	Z+9, r1	; 0x09
     332:	10 86       	std	Z+8, r1	; 0x08
     334:	08 95       	ret

00000336 <vListInsertEnd>:
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	fc 01       	movw	r30, r24
     33c:	db 01       	movw	r26, r22
     33e:	21 81       	ldd	r18, Z+1	; 0x01
     340:	32 81       	ldd	r19, Z+2	; 0x02
     342:	e9 01       	movw	r28, r18
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	9b 81       	ldd	r25, Y+3	; 0x03
     348:	13 96       	adiw	r26, 0x03	; 3
     34a:	9c 93       	st	X, r25
     34c:	8e 93       	st	-X, r24
     34e:	12 97       	sbiw	r26, 0x02	; 2
     350:	81 81       	ldd	r24, Z+1	; 0x01
     352:	92 81       	ldd	r25, Z+2	; 0x02
     354:	15 96       	adiw	r26, 0x05	; 5
     356:	9c 93       	st	X, r25
     358:	8e 93       	st	-X, r24
     35a:	14 97       	sbiw	r26, 0x04	; 4
     35c:	8a 81       	ldd	r24, Y+2	; 0x02
     35e:	9b 81       	ldd	r25, Y+3	; 0x03
     360:	ec 01       	movw	r28, r24
     362:	7d 83       	std	Y+5, r23	; 0x05
     364:	6c 83       	std	Y+4, r22	; 0x04
     366:	e9 01       	movw	r28, r18
     368:	7b 83       	std	Y+3, r23	; 0x03
     36a:	6a 83       	std	Y+2, r22	; 0x02
     36c:	72 83       	std	Z+2, r23	; 0x02
     36e:	61 83       	std	Z+1, r22	; 0x01
     370:	19 96       	adiw	r26, 0x09	; 9
     372:	fc 93       	st	X, r31
     374:	ee 93       	st	-X, r30
     376:	18 97       	sbiw	r26, 0x08	; 8
     378:	80 81       	ld	r24, Z
     37a:	8f 5f       	subi	r24, 0xFF	; 255
     37c:	80 83       	st	Z, r24
     37e:	df 91       	pop	r29
     380:	cf 91       	pop	r28
     382:	08 95       	ret

00000384 <vListInsert>:
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	eb 01       	movw	r28, r22
     38a:	48 81       	ld	r20, Y
     38c:	59 81       	ldd	r21, Y+1	; 0x01
     38e:	4f 3f       	cpi	r20, 0xFF	; 255
     390:	2f ef       	ldi	r18, 0xFF	; 255
     392:	52 07       	cpc	r21, r18
     394:	31 f4       	brne	.+12     	; 0x3a2 <vListInsert+0x1e>
     396:	dc 01       	movw	r26, r24
     398:	17 96       	adiw	r26, 0x07	; 7
     39a:	ed 91       	ld	r30, X+
     39c:	fc 91       	ld	r31, X
     39e:	18 97       	sbiw	r26, 0x08	; 8
     3a0:	17 c0       	rjmp	.+46     	; 0x3d0 <vListInsert+0x4c>
     3a2:	fc 01       	movw	r30, r24
     3a4:	33 96       	adiw	r30, 0x03	; 3
     3a6:	dc 01       	movw	r26, r24
     3a8:	15 96       	adiw	r26, 0x05	; 5
     3aa:	2d 91       	ld	r18, X+
     3ac:	3c 91       	ld	r19, X
     3ae:	16 97       	sbiw	r26, 0x06	; 6
     3b0:	d9 01       	movw	r26, r18
     3b2:	2d 91       	ld	r18, X+
     3b4:	3c 91       	ld	r19, X
     3b6:	42 17       	cp	r20, r18
     3b8:	53 07       	cpc	r21, r19
     3ba:	50 f0       	brcs	.+20     	; 0x3d0 <vListInsert+0x4c>
     3bc:	02 80       	ldd	r0, Z+2	; 0x02
     3be:	f3 81       	ldd	r31, Z+3	; 0x03
     3c0:	e0 2d       	mov	r30, r0
     3c2:	a2 81       	ldd	r26, Z+2	; 0x02
     3c4:	b3 81       	ldd	r27, Z+3	; 0x03
     3c6:	2d 91       	ld	r18, X+
     3c8:	3c 91       	ld	r19, X
     3ca:	42 17       	cp	r20, r18
     3cc:	53 07       	cpc	r21, r19
     3ce:	b0 f7       	brcc	.-20     	; 0x3bc <vListInsert+0x38>
     3d0:	a2 81       	ldd	r26, Z+2	; 0x02
     3d2:	b3 81       	ldd	r27, Z+3	; 0x03
     3d4:	bb 83       	std	Y+3, r27	; 0x03
     3d6:	aa 83       	std	Y+2, r26	; 0x02
     3d8:	15 96       	adiw	r26, 0x05	; 5
     3da:	dc 93       	st	X, r29
     3dc:	ce 93       	st	-X, r28
     3de:	14 97       	sbiw	r26, 0x04	; 4
     3e0:	fd 83       	std	Y+5, r31	; 0x05
     3e2:	ec 83       	std	Y+4, r30	; 0x04
     3e4:	d3 83       	std	Z+3, r29	; 0x03
     3e6:	c2 83       	std	Z+2, r28	; 0x02
     3e8:	99 87       	std	Y+9, r25	; 0x09
     3ea:	88 87       	std	Y+8, r24	; 0x08
     3ec:	fc 01       	movw	r30, r24
     3ee:	20 81       	ld	r18, Z
     3f0:	2f 5f       	subi	r18, 0xFF	; 255
     3f2:	20 83       	st	Z, r18
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	08 95       	ret

000003fa <vListRemove>:
     3fa:	fc 01       	movw	r30, r24
     3fc:	a2 81       	ldd	r26, Z+2	; 0x02
     3fe:	b3 81       	ldd	r27, Z+3	; 0x03
     400:	84 81       	ldd	r24, Z+4	; 0x04
     402:	95 81       	ldd	r25, Z+5	; 0x05
     404:	15 96       	adiw	r26, 0x05	; 5
     406:	9c 93       	st	X, r25
     408:	8e 93       	st	-X, r24
     40a:	14 97       	sbiw	r26, 0x04	; 4
     40c:	a4 81       	ldd	r26, Z+4	; 0x04
     40e:	b5 81       	ldd	r27, Z+5	; 0x05
     410:	82 81       	ldd	r24, Z+2	; 0x02
     412:	93 81       	ldd	r25, Z+3	; 0x03
     414:	13 96       	adiw	r26, 0x03	; 3
     416:	9c 93       	st	X, r25
     418:	8e 93       	st	-X, r24
     41a:	12 97       	sbiw	r26, 0x02	; 2
     41c:	a0 85       	ldd	r26, Z+8	; 0x08
     41e:	b1 85       	ldd	r27, Z+9	; 0x09
     420:	11 96       	adiw	r26, 0x01	; 1
     422:	8d 91       	ld	r24, X+
     424:	9c 91       	ld	r25, X
     426:	12 97       	sbiw	r26, 0x02	; 2
     428:	e8 17       	cp	r30, r24
     42a:	f9 07       	cpc	r31, r25
     42c:	31 f4       	brne	.+12     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     42e:	84 81       	ldd	r24, Z+4	; 0x04
     430:	95 81       	ldd	r25, Z+5	; 0x05
     432:	12 96       	adiw	r26, 0x02	; 2
     434:	9c 93       	st	X, r25
     436:	8e 93       	st	-X, r24
     438:	11 97       	sbiw	r26, 0x01	; 1
     43a:	11 86       	std	Z+9, r1	; 0x09
     43c:	10 86       	std	Z+8, r1	; 0x08
     43e:	8c 91       	ld	r24, X
     440:	81 50       	subi	r24, 0x01	; 1
     442:	8c 93       	st	X, r24
     444:	08 95       	ret

00000446 <write>:
//////////////////////////////////////////////////////////////////////// LOCAL VARIABLES ////////////////////////////////////////////////////////////////////////

enum MotorState {READ_MOTION, MENU, READ_KEY_WAIT, READ_KEY_INIT, CURRENT_PASS, CHANGE_PASS, READ_KEY_WAIT_2, READ_KEY_INIT_2, READ_KEY_WAIT_3, READ_KEY_INIT_3, READ_KEY, LOCK, UNLOCK} motor_state;

void Motor_Init(){
	motor_state = READ_MOTION;
     446:	28 98       	cbi	0x05, 0	; 5
     448:	66 23       	and	r22, r22
     44a:	11 f0       	breq	.+4      	; 0x450 <write+0xa>
     44c:	2a 9a       	sbi	0x05, 2	; 5
     44e:	15 c0       	rjmp	.+42     	; 0x47a <write+0x34>
     450:	2a 98       	cbi	0x05, 2	; 5
     452:	13 c0       	rjmp	.+38     	; 0x47a <write+0x34>
     454:	ac 01       	movw	r20, r24
     456:	02 2e       	mov	r0, r18
     458:	02 c0       	rjmp	.+4      	; 0x45e <write+0x18>
     45a:	55 95       	asr	r21
     45c:	47 95       	ror	r20
     45e:	0a 94       	dec	r0
     460:	e2 f7       	brpl	.-8      	; 0x45a <write+0x14>
     462:	40 ff       	sbrs	r20, 0
     464:	02 c0       	rjmp	.+4      	; 0x46a <write+0x24>
     466:	2b 9a       	sbi	0x05, 3	; 5
     468:	01 c0       	rjmp	.+2      	; 0x46c <write+0x26>
     46a:	2b 98       	cbi	0x05, 3	; 5
     46c:	2c 9a       	sbi	0x05, 4	; 5
     46e:	2c 98       	cbi	0x05, 4	; 5
     470:	21 50       	subi	r18, 0x01	; 1
     472:	31 09       	sbc	r19, r1
     474:	78 f7       	brcc	.-34     	; 0x454 <write+0xe>
     476:	28 9a       	sbi	0x05, 0	; 5
     478:	08 95       	ret
     47a:	27 e0       	ldi	r18, 0x07	; 7
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	e9 cf       	rjmp	.-46     	; 0x454 <write+0xe>

00000482 <write_cmd>:
     482:	60 e0       	ldi	r22, 0x00	; 0
     484:	e0 cf       	rjmp	.-64     	; 0x446 <write>
     486:	08 95       	ret

00000488 <GetKeypadKey>:
     488:	8f ee       	ldi	r24, 0xEF	; 239
     48a:	88 b9       	out	0x08, r24	; 8
     48c:	00 00       	nop
     48e:	30 9b       	sbis	0x06, 0	; 6
     490:	29 c0       	rjmp	.+82     	; 0x4e4 <GetKeypadKey+0x5c>
     492:	31 9b       	sbis	0x06, 1	; 6
     494:	29 c0       	rjmp	.+82     	; 0x4e8 <GetKeypadKey+0x60>
     496:	32 9b       	sbis	0x06, 2	; 6
     498:	29 c0       	rjmp	.+82     	; 0x4ec <GetKeypadKey+0x64>
     49a:	33 9b       	sbis	0x06, 3	; 6
     49c:	29 c0       	rjmp	.+82     	; 0x4f0 <GetKeypadKey+0x68>
     49e:	8f ed       	ldi	r24, 0xDF	; 223
     4a0:	88 b9       	out	0x08, r24	; 8
     4a2:	00 00       	nop
     4a4:	30 9b       	sbis	0x06, 0	; 6
     4a6:	26 c0       	rjmp	.+76     	; 0x4f4 <GetKeypadKey+0x6c>
     4a8:	31 9b       	sbis	0x06, 1	; 6
     4aa:	26 c0       	rjmp	.+76     	; 0x4f8 <GetKeypadKey+0x70>
     4ac:	32 9b       	sbis	0x06, 2	; 6
     4ae:	26 c0       	rjmp	.+76     	; 0x4fc <GetKeypadKey+0x74>
     4b0:	33 9b       	sbis	0x06, 3	; 6
     4b2:	26 c0       	rjmp	.+76     	; 0x500 <GetKeypadKey+0x78>
     4b4:	8f eb       	ldi	r24, 0xBF	; 191
     4b6:	88 b9       	out	0x08, r24	; 8
     4b8:	00 00       	nop
     4ba:	30 9b       	sbis	0x06, 0	; 6
     4bc:	23 c0       	rjmp	.+70     	; 0x504 <GetKeypadKey+0x7c>
     4be:	31 9b       	sbis	0x06, 1	; 6
     4c0:	23 c0       	rjmp	.+70     	; 0x508 <GetKeypadKey+0x80>
     4c2:	32 9b       	sbis	0x06, 2	; 6
     4c4:	23 c0       	rjmp	.+70     	; 0x50c <GetKeypadKey+0x84>
     4c6:	33 9b       	sbis	0x06, 3	; 6
     4c8:	23 c0       	rjmp	.+70     	; 0x510 <GetKeypadKey+0x88>
     4ca:	8f e7       	ldi	r24, 0x7F	; 127
     4cc:	88 b9       	out	0x08, r24	; 8
     4ce:	00 00       	nop
     4d0:	30 9b       	sbis	0x06, 0	; 6
     4d2:	20 c0       	rjmp	.+64     	; 0x514 <GetKeypadKey+0x8c>
     4d4:	31 9b       	sbis	0x06, 1	; 6
     4d6:	20 c0       	rjmp	.+64     	; 0x518 <GetKeypadKey+0x90>
     4d8:	32 9b       	sbis	0x06, 2	; 6
     4da:	20 c0       	rjmp	.+64     	; 0x51c <GetKeypadKey+0x94>
     4dc:	33 9b       	sbis	0x06, 3	; 6
     4de:	20 c0       	rjmp	.+64     	; 0x520 <GetKeypadKey+0x98>
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	08 95       	ret
     4e4:	81 e3       	ldi	r24, 0x31	; 49
     4e6:	08 95       	ret
     4e8:	84 e3       	ldi	r24, 0x34	; 52
     4ea:	08 95       	ret
     4ec:	87 e3       	ldi	r24, 0x37	; 55
     4ee:	08 95       	ret
     4f0:	8a e2       	ldi	r24, 0x2A	; 42
     4f2:	08 95       	ret
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	08 95       	ret
     4f8:	85 e3       	ldi	r24, 0x35	; 53
     4fa:	08 95       	ret
     4fc:	88 e3       	ldi	r24, 0x38	; 56
     4fe:	08 95       	ret
     500:	80 e3       	ldi	r24, 0x30	; 48
     502:	08 95       	ret
     504:	83 e3       	ldi	r24, 0x33	; 51
     506:	08 95       	ret
     508:	86 e3       	ldi	r24, 0x36	; 54
     50a:	08 95       	ret
     50c:	89 e3       	ldi	r24, 0x39	; 57
     50e:	08 95       	ret
     510:	83 e2       	ldi	r24, 0x23	; 35
     512:	08 95       	ret
     514:	81 e4       	ldi	r24, 0x41	; 65
     516:	08 95       	ret
     518:	82 e4       	ldi	r24, 0x42	; 66
     51a:	08 95       	ret
     51c:	83 e4       	ldi	r24, 0x43	; 67
     51e:	08 95       	ret
     520:	84 e4       	ldi	r24, 0x44	; 68
     522:	08 95       	ret

00000524 <nokia_lcd_init>:
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
     528:	20 9a       	sbi	0x04, 0	; 4
     52a:	21 9a       	sbi	0x04, 1	; 4
     52c:	22 9a       	sbi	0x04, 2	; 4
     52e:	23 9a       	sbi	0x04, 3	; 4
     530:	24 9a       	sbi	0x04, 4	; 4
     532:	29 9a       	sbi	0x05, 1	; 5
     534:	28 9a       	sbi	0x05, 0	; 5
     536:	83 ec       	ldi	r24, 0xC3	; 195
     538:	99 e0       	ldi	r25, 0x09	; 9
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	f1 f7       	brne	.-4      	; 0x53a <nokia_lcd_init+0x16>
     53e:	00 c0       	rjmp	.+0      	; 0x540 <nokia_lcd_init+0x1c>
     540:	00 00       	nop
     542:	29 98       	cbi	0x05, 1	; 5
     544:	8b e5       	ldi	r24, 0x5B	; 91
     546:	94 e4       	ldi	r25, 0x44	; 68
     548:	01 97       	sbiw	r24, 0x01	; 1
     54a:	f1 f7       	brne	.-4      	; 0x548 <nokia_lcd_init+0x24>
     54c:	00 c0       	rjmp	.+0      	; 0x54e <nokia_lcd_init+0x2a>
     54e:	00 00       	nop
     550:	29 9a       	sbi	0x05, 1	; 5
     552:	28 98       	cbi	0x05, 0	; 5
     554:	81 e2       	ldi	r24, 0x21	; 33
     556:	95 df       	rcall	.-214    	; 0x482 <write_cmd>
     558:	83 e1       	ldi	r24, 0x13	; 19
     55a:	93 df       	rcall	.-218    	; 0x482 <write_cmd>
     55c:	86 e0       	ldi	r24, 0x06	; 6
     55e:	91 df       	rcall	.-222    	; 0x482 <write_cmd>
     560:	82 ec       	ldi	r24, 0xC2	; 194
     562:	8f df       	rcall	.-226    	; 0x482 <write_cmd>
     564:	80 e2       	ldi	r24, 0x20	; 32
     566:	8d df       	rcall	.-230    	; 0x482 <write_cmd>
     568:	89 e0       	ldi	r24, 0x09	; 9
     56a:	8b df       	rcall	.-234    	; 0x482 <write_cmd>
     56c:	80 e8       	ldi	r24, 0x80	; 128
     56e:	89 df       	rcall	.-238    	; 0x482 <write_cmd>
     570:	80 e4       	ldi	r24, 0x40	; 64
     572:	87 df       	rcall	.-242    	; 0x482 <write_cmd>
     574:	c8 ef       	ldi	r28, 0xF8	; 248
     576:	d1 e0       	ldi	r29, 0x01	; 1
     578:	61 e0       	ldi	r22, 0x01	; 1
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	64 df       	rcall	.-312    	; 0x446 <write>
     57e:	21 97       	sbiw	r28, 0x01	; 1
     580:	d9 f7       	brne	.-10     	; 0x578 <nokia_lcd_init+0x54>
     582:	88 e0       	ldi	r24, 0x08	; 8
     584:	7e df       	rcall	.-260    	; 0x482 <write_cmd>
     586:	8c e0       	ldi	r24, 0x0C	; 12
     588:	7c df       	rcall	.-264    	; 0x482 <write_cmd>
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <nokia_lcd_clear>:
     590:	80 e8       	ldi	r24, 0x80	; 128
     592:	77 df       	rcall	.-274    	; 0x482 <write_cmd>
     594:	80 e4       	ldi	r24, 0x40	; 64
     596:	75 df       	rcall	.-278    	; 0x482 <write_cmd>
     598:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <nokia_lcd+0x1f8>
     59c:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <nokia_lcd+0x1f9>
     5a0:	e5 e9       	ldi	r30, 0x95	; 149
     5a2:	f7 e0       	ldi	r31, 0x07	; 7
     5a4:	8d e8       	ldi	r24, 0x8D	; 141
     5a6:	99 e0       	ldi	r25, 0x09	; 9
     5a8:	11 92       	st	Z+, r1
     5aa:	e8 17       	cp	r30, r24
     5ac:	f9 07       	cpc	r31, r25
     5ae:	e1 f7       	brne	.-8      	; 0x5a8 <nokia_lcd_clear+0x18>
     5b0:	08 95       	ret

000005b2 <nokia_lcd_set_pixel>:
     5b2:	26 2f       	mov	r18, r22
     5b4:	26 95       	lsr	r18
     5b6:	26 95       	lsr	r18
     5b8:	26 95       	lsr	r18
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	34 e5       	ldi	r19, 0x54	; 84
     5be:	23 9f       	mul	r18, r19
     5c0:	80 0d       	add	r24, r0
     5c2:	91 1d       	adc	r25, r1
     5c4:	11 24       	eor	r1, r1
     5c6:	44 23       	and	r20, r20
     5c8:	79 f0       	breq	.+30     	; 0x5e8 <nokia_lcd_set_pixel+0x36>
     5ca:	fc 01       	movw	r30, r24
     5cc:	eb 56       	subi	r30, 0x6B	; 107
     5ce:	f8 4f       	sbci	r31, 0xF8	; 248
     5d0:	67 70       	andi	r22, 0x07	; 7
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	02 c0       	rjmp	.+4      	; 0x5dc <nokia_lcd_set_pixel+0x2a>
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	6a 95       	dec	r22
     5de:	e2 f7       	brpl	.-8      	; 0x5d8 <nokia_lcd_set_pixel+0x26>
     5e0:	90 81       	ld	r25, Z
     5e2:	89 2b       	or	r24, r25
     5e4:	80 83       	st	Z, r24
     5e6:	08 95       	ret
     5e8:	fc 01       	movw	r30, r24
     5ea:	eb 56       	subi	r30, 0x6B	; 107
     5ec:	f8 4f       	sbci	r31, 0xF8	; 248
     5ee:	67 70       	andi	r22, 0x07	; 7
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 e0       	ldi	r25, 0x00	; 0
     5f4:	02 c0       	rjmp	.+4      	; 0x5fa <nokia_lcd_set_pixel+0x48>
     5f6:	88 0f       	add	r24, r24
     5f8:	99 1f       	adc	r25, r25
     5fa:	6a 95       	dec	r22
     5fc:	e2 f7       	brpl	.-8      	; 0x5f6 <nokia_lcd_set_pixel+0x44>
     5fe:	80 95       	com	r24
     600:	90 81       	ld	r25, Z
     602:	89 23       	and	r24, r25
     604:	80 83       	st	Z, r24
     606:	08 95       	ret

00000608 <nokia_lcd_write_char>:
     608:	5f 92       	push	r5
     60a:	6f 92       	push	r6
     60c:	7f 92       	push	r7
     60e:	8f 92       	push	r8
     610:	9f 92       	push	r9
     612:	af 92       	push	r10
     614:	bf 92       	push	r11
     616:	cf 92       	push	r12
     618:	df 92       	push	r13
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	56 2e       	mov	r5, r22
     628:	26 2f       	mov	r18, r22
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	49 01       	movw	r8, r18
     62e:	88 0c       	add	r8, r8
     630:	99 1c       	adc	r9, r9
     632:	88 0c       	add	r8, r8
     634:	99 1c       	adc	r9, r9
     636:	82 0e       	add	r8, r18
     638:	93 1e       	adc	r9, r19
     63a:	18 14       	cp	r1, r8
     63c:	19 04       	cpc	r1, r9
     63e:	0c f0       	brlt	.+2      	; 0x642 <nokia_lcd_write_char+0x3a>
     640:	5b c0       	rjmp	.+182    	; 0x6f8 <nokia_lcd_write_char+0xf0>
     642:	89 01       	movw	r16, r18
     644:	00 0f       	add	r16, r16
     646:	11 1f       	adc	r17, r17
     648:	00 0f       	add	r16, r16
     64a:	11 1f       	adc	r17, r17
     64c:	00 0f       	add	r16, r16
     64e:	11 1f       	adc	r17, r17
     650:	02 1b       	sub	r16, r18
     652:	13 0b       	sbc	r17, r19
     654:	61 2c       	mov	r6, r1
     656:	a8 2e       	mov	r10, r24
     658:	b1 2c       	mov	r11, r1
     65a:	c5 01       	movw	r24, r10
     65c:	80 97       	sbiw	r24, 0x20	; 32
     65e:	5c 01       	movw	r10, r24
     660:	aa 0c       	add	r10, r10
     662:	bb 1c       	adc	r11, r11
     664:	aa 0c       	add	r10, r10
     666:	bb 1c       	adc	r11, r11
     668:	a8 0e       	add	r10, r24
     66a:	b9 1e       	adc	r11, r25
     66c:	0f 2e       	mov	r0, r31
     66e:	fe e8       	ldi	r31, 0x8E	; 142
     670:	cf 2e       	mov	r12, r31
     672:	f9 e0       	ldi	r31, 0x09	; 9
     674:	df 2e       	mov	r13, r31
     676:	f0 2d       	mov	r31, r0
     678:	0f 2e       	mov	r0, r31
     67a:	fd e8       	ldi	r31, 0x8D	; 141
     67c:	ef 2e       	mov	r14, r31
     67e:	f9 e0       	ldi	r31, 0x09	; 9
     680:	ff 2e       	mov	r15, r31
     682:	f0 2d       	mov	r31, r0
     684:	2b c0       	rjmp	.+86     	; 0x6dc <nokia_lcd_write_char+0xd4>
     686:	fe 01       	movw	r30, r28
     688:	24 91       	lpm	r18, Z
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	87 2d       	mov	r24, r7
     68e:	65 2d       	mov	r22, r5
     690:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__udivmodqi4>
     694:	02 c0       	rjmp	.+4      	; 0x69a <nokia_lcd_write_char+0x92>
     696:	35 95       	asr	r19
     698:	27 95       	ror	r18
     69a:	8a 95       	dec	r24
     69c:	e2 f7       	brpl	.-8      	; 0x696 <nokia_lcd_write_char+0x8e>
     69e:	20 ff       	sbrs	r18, 0
     6a0:	09 c0       	rjmp	.+18     	; 0x6b4 <nokia_lcd_write_char+0xac>
     6a2:	f6 01       	movw	r30, r12
     6a4:	60 81       	ld	r22, Z
     6a6:	67 0d       	add	r22, r7
     6a8:	f7 01       	movw	r30, r14
     6aa:	80 81       	ld	r24, Z
     6ac:	41 e0       	ldi	r20, 0x01	; 1
     6ae:	86 0d       	add	r24, r6
     6b0:	80 df       	rcall	.-256    	; 0x5b2 <nokia_lcd_set_pixel>
     6b2:	08 c0       	rjmp	.+16     	; 0x6c4 <nokia_lcd_write_char+0xbc>
     6b4:	f6 01       	movw	r30, r12
     6b6:	60 81       	ld	r22, Z
     6b8:	67 0d       	add	r22, r7
     6ba:	f7 01       	movw	r30, r14
     6bc:	80 81       	ld	r24, Z
     6be:	40 e0       	ldi	r20, 0x00	; 0
     6c0:	86 0d       	add	r24, r6
     6c2:	77 df       	rcall	.-274    	; 0x5b2 <nokia_lcd_set_pixel>
     6c4:	73 94       	inc	r7
     6c6:	87 2d       	mov	r24, r7
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	80 17       	cp	r24, r16
     6cc:	91 07       	cpc	r25, r17
     6ce:	dc f2       	brlt	.-74     	; 0x686 <nokia_lcd_write_char+0x7e>
     6d0:	63 94       	inc	r6
     6d2:	86 2d       	mov	r24, r6
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	88 15       	cp	r24, r8
     6d8:	99 05       	cpc	r25, r9
     6da:	74 f4       	brge	.+28     	; 0x6f8 <nokia_lcd_write_char+0xf0>
     6dc:	10 16       	cp	r1, r16
     6de:	11 06       	cpc	r1, r17
     6e0:	bc f7       	brge	.-18     	; 0x6d0 <nokia_lcd_write_char+0xc8>
     6e2:	86 2d       	mov	r24, r6
     6e4:	65 2d       	mov	r22, r5
     6e6:	0e 94 e2 0c 	call	0x19c4	; 0x19c4 <__udivmodqi4>
     6ea:	e5 01       	movw	r28, r10
     6ec:	c8 0f       	add	r28, r24
     6ee:	d1 1d       	adc	r29, r1
     6f0:	ca 55       	subi	r28, 0x5A	; 90
     6f2:	df 4f       	sbci	r29, 0xFF	; 255
     6f4:	71 2c       	mov	r7, r1
     6f6:	c7 cf       	rjmp	.-114    	; 0x686 <nokia_lcd_write_char+0x7e>
     6f8:	80 91 8d 09 	lds	r24, 0x098D	; 0x80098d <nokia_lcd+0x1f8>
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	98 0f       	add	r25, r24
     700:	85 2d       	mov	r24, r5
     702:	88 0f       	add	r24, r24
     704:	88 0f       	add	r24, r24
     706:	85 0d       	add	r24, r5
     708:	89 0f       	add	r24, r25
     70a:	84 35       	cpi	r24, 0x54	; 84
     70c:	18 f4       	brcc	.+6      	; 0x714 <nokia_lcd_write_char+0x10c>
     70e:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <nokia_lcd+0x1f8>
     712:	0e c0       	rjmp	.+28     	; 0x730 <nokia_lcd_write_char+0x128>
     714:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <nokia_lcd+0x1f8>
     718:	ee e8       	ldi	r30, 0x8E	; 142
     71a:	f9 e0       	ldi	r31, 0x09	; 9
     71c:	80 81       	ld	r24, Z
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	98 0f       	add	r25, r24
     722:	85 2d       	mov	r24, r5
     724:	88 0f       	add	r24, r24
     726:	88 0f       	add	r24, r24
     728:	88 0f       	add	r24, r24
     72a:	85 19       	sub	r24, r5
     72c:	89 0f       	add	r24, r25
     72e:	80 83       	st	Z, r24
     730:	80 91 8e 09 	lds	r24, 0x098E	; 0x80098e <nokia_lcd+0x1f9>
     734:	80 33       	cpi	r24, 0x30	; 48
     736:	20 f0       	brcs	.+8      	; 0x740 <nokia_lcd_write_char+0x138>
     738:	10 92 8d 09 	sts	0x098D, r1	; 0x80098d <nokia_lcd+0x1f8>
     73c:	10 92 8e 09 	sts	0x098E, r1	; 0x80098e <nokia_lcd+0x1f9>
     740:	df 91       	pop	r29
     742:	cf 91       	pop	r28
     744:	1f 91       	pop	r17
     746:	0f 91       	pop	r16
     748:	ff 90       	pop	r15
     74a:	ef 90       	pop	r14
     74c:	df 90       	pop	r13
     74e:	cf 90       	pop	r12
     750:	bf 90       	pop	r11
     752:	af 90       	pop	r10
     754:	9f 90       	pop	r9
     756:	8f 90       	pop	r8
     758:	7f 90       	pop	r7
     75a:	6f 90       	pop	r6
     75c:	5f 90       	pop	r5
     75e:	08 95       	ret

00000760 <nokia_lcd_write_string>:
     760:	1f 93       	push	r17
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	ec 01       	movw	r28, r24
     768:	88 81       	ld	r24, Y
     76a:	88 23       	and	r24, r24
     76c:	39 f0       	breq	.+14     	; 0x77c <nokia_lcd_write_string+0x1c>
     76e:	16 2f       	mov	r17, r22
     770:	21 96       	adiw	r28, 0x01	; 1
     772:	61 2f       	mov	r22, r17
     774:	49 df       	rcall	.-366    	; 0x608 <nokia_lcd_write_char>
     776:	89 91       	ld	r24, Y+
     778:	81 11       	cpse	r24, r1
     77a:	fb cf       	rjmp	.-10     	; 0x772 <nokia_lcd_write_string+0x12>
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <nokia_lcd_render>:
     784:	0f 93       	push	r16
     786:	1f 93       	push	r17
     788:	cf 93       	push	r28
     78a:	df 93       	push	r29
     78c:	80 e8       	ldi	r24, 0x80	; 128
     78e:	79 de       	rcall	.-782    	; 0x482 <write_cmd>
     790:	80 e4       	ldi	r24, 0x40	; 64
     792:	77 de       	rcall	.-786    	; 0x482 <write_cmd>
     794:	c5 e9       	ldi	r28, 0x95	; 149
     796:	d7 e0       	ldi	r29, 0x07	; 7
     798:	0d e8       	ldi	r16, 0x8D	; 141
     79a:	19 e0       	ldi	r17, 0x09	; 9
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	89 91       	ld	r24, Y+
     7a0:	52 de       	rcall	.-860    	; 0x446 <write>
     7a2:	c0 17       	cp	r28, r16
     7a4:	d1 07       	cpc	r29, r17
     7a6:	d1 f7       	brne	.-12     	; 0x79c <nokia_lcd_render+0x18>
     7a8:	df 91       	pop	r29
     7aa:	cf 91       	pop	r28
     7ac:	1f 91       	pop	r17
     7ae:	0f 91       	pop	r16
     7b0:	08 95       	ret

000007b2 <initUSART>:
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	81 f0       	breq	.+32     	; 0x7d6 <initUSART+0x24>
     7b6:	e1 ec       	ldi	r30, 0xC1	; 193
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	80 81       	ld	r24, Z
     7bc:	88 61       	ori	r24, 0x18	; 24
     7be:	80 83       	st	Z, r24
     7c0:	e2 ec       	ldi	r30, 0xC2	; 194
     7c2:	f0 e0       	ldi	r31, 0x00	; 0
     7c4:	80 81       	ld	r24, Z
     7c6:	86 60       	ori	r24, 0x06	; 6
     7c8:	80 83       	st	Z, r24
     7ca:	85 e0       	ldi	r24, 0x05	; 5
     7cc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
     7d0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
     7d4:	08 95       	ret
     7d6:	e9 ec       	ldi	r30, 0xC9	; 201
     7d8:	f0 e0       	ldi	r31, 0x00	; 0
     7da:	80 81       	ld	r24, Z
     7dc:	88 61       	ori	r24, 0x18	; 24
     7de:	80 83       	st	Z, r24
     7e0:	ea ec       	ldi	r30, 0xCA	; 202
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	80 81       	ld	r24, Z
     7e6:	86 60       	ori	r24, 0x06	; 6
     7e8:	80 83       	st	Z, r24
     7ea:	85 e0       	ldi	r24, 0x05	; 5
     7ec:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
     7f0:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
     7f4:	08 95       	ret

000007f6 <USART_Flush>:
     7f6:	81 30       	cpi	r24, 0x01	; 1
     7f8:	29 f4       	brne	.+10     	; 0x804 <USART_Flush+0xe>
     7fa:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
     7fe:	88 23       	and	r24, r24
     800:	74 f0       	brlt	.+28     	; 0x81e <USART_Flush+0x28>
     802:	08 95       	ret
     804:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     808:	88 23       	and	r24, r24
     80a:	8c f4       	brge	.+34     	; 0x82e <USART_Flush+0x38>
     80c:	a6 ec       	ldi	r26, 0xC6	; 198
     80e:	b0 e0       	ldi	r27, 0x00	; 0
     810:	e0 ec       	ldi	r30, 0xC0	; 192
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	8c 91       	ld	r24, X
     816:	80 81       	ld	r24, Z
     818:	88 23       	and	r24, r24
     81a:	e4 f3       	brlt	.-8      	; 0x814 <USART_Flush+0x1e>
     81c:	08 95       	ret
     81e:	ae ec       	ldi	r26, 0xCE	; 206
     820:	b0 e0       	ldi	r27, 0x00	; 0
     822:	e8 ec       	ldi	r30, 0xC8	; 200
     824:	f0 e0       	ldi	r31, 0x00	; 0
     826:	8c 91       	ld	r24, X
     828:	80 81       	ld	r24, Z
     82a:	88 23       	and	r24, r24
     82c:	e4 f3       	brlt	.-8      	; 0x826 <USART_Flush+0x30>
     82e:	08 95       	ret

00000830 <USART_Receive>:
     830:	81 30       	cpi	r24, 0x01	; 1
     832:	41 f0       	breq	.+16     	; 0x844 <USART_Receive+0x14>
     834:	e0 ec       	ldi	r30, 0xC0	; 192
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	80 81       	ld	r24, Z
     83a:	88 23       	and	r24, r24
     83c:	ec f7       	brge	.-6      	; 0x838 <USART_Receive+0x8>
     83e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
     842:	08 95       	ret
     844:	e8 ec       	ldi	r30, 0xC8	; 200
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	88 23       	and	r24, r24
     84c:	ec f7       	brge	.-6      	; 0x848 <USART_Receive+0x18>
     84e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
     852:	08 95       	ret

00000854 <Motor_Tick>:
}

void Motor_Tick()
{
     854:	ef 92       	push	r14
     856:	ff 92       	push	r15
     858:	0f 93       	push	r16
     85a:	1f 93       	push	r17
     85c:	cf 93       	push	r28
     85e:	df 93       	push	r29
	char garage_button = (GetBit(~PIND, 3)); //if button is pressed then = 8
     860:	89 b1       	in	r24, 0x09	; 9
	return (bin_value ? pin | (0x01 << number) : pin & ~(0x01 << number));
}

unsigned char GetBit(unsigned char port, unsigned char number)
{
	return ( port & (0x01 << number) );
     862:	80 95       	com	r24
     864:	38 2f       	mov	r19, r24
     866:	38 70       	andi	r19, 0x08	; 8
	char motion_sensor = (GetBit(~PIND, 2)); //if motion is sensed then = 4
     868:	89 b1       	in	r24, 0x09	; 9
     86a:	80 95       	com	r24
     86c:	28 2f       	mov	r18, r24
     86e:	24 70       	andi	r18, 0x04	; 4
	switch(motor_state)
     870:	e0 91 e9 09 	lds	r30, 0x09E9	; 0x8009e9 <motor_state>
     874:	8e 2f       	mov	r24, r30
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	8d 30       	cpi	r24, 0x0D	; 13
     87a:	91 05       	cpc	r25, r1
     87c:	08 f0       	brcs	.+2      	; 0x880 <Motor_Tick+0x2c>
     87e:	d3 c0       	rjmp	.+422    	; 0xa26 <Motor_Tick+0x1d2>
     880:	fc 01       	movw	r30, r24
     882:	ea 5b       	subi	r30, 0xBA	; 186
     884:	ff 4f       	sbci	r31, 0xFF	; 255
     886:	0c 94 ee 0c 	jmp	0x19dc	; 0x19dc <__tablejump2__>
	{	
		case READ_MOTION:
			if(motion_sensor == 4){motor_state = MENU;}
     88a:	24 30       	cpi	r18, 0x04	; 4
     88c:	09 f0       	breq	.+2      	; 0x890 <Motor_Tick+0x3c>
     88e:	3f c3       	rjmp	.+1662   	; 0xf0e <Motor_Tick+0x6ba>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     896:	3f c3       	rjmp	.+1662   	; 0xf16 <Motor_Tick+0x6c2>
			else if(motion_sensor == 0){motor_state = READ_MOTION;}
			break;
		
		case MENU:
			if(menu_check == 1){motor_state = READ_KEY_WAIT;}
     898:	80 91 91 07 	lds	r24, 0x0791	; 0x800791 <menu_check>
     89c:	81 30       	cpi	r24, 0x01	; 1
     89e:	21 f4       	brne	.+8      	; 0x8a8 <Motor_Tick+0x54>
     8a0:	82 e0       	ldi	r24, 0x02	; 2
     8a2:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     8a6:	82 c3       	rjmp	.+1796   	; 0xfac <Motor_Tick+0x758>
			else if(menu_check == 2){motor_state = CHANGE_PASS;}
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	21 f4       	brne	.+8      	; 0x8b4 <Motor_Tick+0x60>
     8ac:	85 e0       	ldi	r24, 0x05	; 5
     8ae:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     8b2:	70 c3       	rjmp	.+1760   	; 0xf94 <Motor_Tick+0x740>
			else if(menu_check == 3){motor_state = CURRENT_PASS;}
     8b4:	83 30       	cpi	r24, 0x03	; 3
     8b6:	09 f0       	breq	.+2      	; 0x8ba <Motor_Tick+0x66>
     8b8:	2e c3       	rjmp	.+1628   	; 0xf16 <Motor_Tick+0x6c2>
     8ba:	84 e0       	ldi	r24, 0x04	; 4
     8bc:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     8c0:	3e c3       	rjmp	.+1660   	; 0xf3e <Motor_Tick+0x6ea>
			else if(menu_check == 0){motor_state = MENU;}
			break;
			
		case READ_KEY_WAIT:
			if(cnt > 100){motor_state = READ_KEY_INIT; cnt = 0;}
     8c2:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <cnt>
     8c6:	85 36       	cpi	r24, 0x65	; 101
     8c8:	30 f0       	brcs	.+12     	; 0x8d6 <Motor_Tick+0x82>
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     8d0:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <cnt>
     8d4:	f4 c0       	rjmp	.+488    	; 0xabe <Motor_Tick+0x26a>
			else{motor_state = READ_KEY_WAIT; cnt = cnt + 1;}
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <cnt>
     8dc:	67 c3       	rjmp	.+1742   	; 0xfac <Motor_Tick+0x758>
			break;
			
		case READ_KEY_INIT:
			if((checker == 1) && (bt_check == 0)){motor_state = READ_KEY_WAIT_2;}
     8de:	80 91 90 07 	lds	r24, 0x0790	; 0x800790 <checker>
     8e2:	81 30       	cpi	r24, 0x01	; 1
     8e4:	41 f4       	brne	.+16     	; 0x8f6 <Motor_Tick+0xa2>
     8e6:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
     8ea:	81 11       	cpse	r24, r1
     8ec:	e8 c0       	rjmp	.+464    	; 0xabe <Motor_Tick+0x26a>
     8ee:	86 e0       	ldi	r24, 0x06	; 6
     8f0:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     8f4:	5b c3       	rjmp	.+1718   	; 0xfac <Motor_Tick+0x758>
			else if((checker == 0) && (bt_check == 1)){motor_state = UNLOCK;}
     8f6:	81 11       	cpse	r24, r1
     8f8:	e2 c0       	rjmp	.+452    	; 0xabe <Motor_Tick+0x26a>
     8fa:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
     8fe:	81 30       	cpi	r24, 0x01	; 1
     900:	09 f0       	breq	.+2      	; 0x904 <Motor_Tick+0xb0>
     902:	dd c0       	rjmp	.+442    	; 0xabe <Motor_Tick+0x26a>
     904:	8c e0       	ldi	r24, 0x0C	; 12
     906:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     90a:	13 c3       	rjmp	.+1574   	; 0xf32 <Motor_Tick+0x6de>
			else if((checker == 0) && (bt_check == 0)){motor_state = READ_KEY_INIT;}
			break;
			
		case CURRENT_PASS:
			if(cnt > 100){motor_state = MENU; cnt = 0;}
     90c:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <cnt>
     910:	85 36       	cpi	r24, 0x65	; 101
     912:	30 f0       	brcs	.+12     	; 0x920 <Motor_Tick+0xcc>
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     91a:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <cnt>
     91e:	fb c2       	rjmp	.+1526   	; 0xf16 <Motor_Tick+0x6c2>
			else{motor_state = CURRENT_PASS; cnt = cnt + 1;}
     920:	8f 5f       	subi	r24, 0xFF	; 255
     922:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <cnt>
     926:	0b c3       	rjmp	.+1558   	; 0xf3e <Motor_Tick+0x6ea>
			break;
			
		case CHANGE_PASS:
			if(cnt > 100){motor_state = MENU; cnt = 0;}
     928:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <cnt>
     92c:	85 36       	cpi	r24, 0x65	; 101
     92e:	30 f0       	brcs	.+12     	; 0x93c <Motor_Tick+0xe8>
     930:	81 e0       	ldi	r24, 0x01	; 1
     932:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     936:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <cnt>
     93a:	ed c2       	rjmp	.+1498   	; 0xf16 <Motor_Tick+0x6c2>
			else{motor_state = CHANGE_PASS; cnt = cnt + 1;}
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <cnt>
     942:	28 c3       	rjmp	.+1616   	; 0xf94 <Motor_Tick+0x740>
			break;
			
		case READ_KEY_WAIT_2:
			if(cnt > 200){motor_state = READ_KEY_INIT_2; cnt = 0;}
     944:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <cnt>
     948:	89 3c       	cpi	r24, 0xC9	; 201
     94a:	30 f0       	brcs	.+12     	; 0x958 <Motor_Tick+0x104>
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     952:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <cnt>
     956:	f1 c0       	rjmp	.+482    	; 0xb3a <Motor_Tick+0x2e6>
			else{motor_state = READ_KEY_WAIT_2; cnt = cnt + 1;}
     958:	8f 5f       	subi	r24, 0xFF	; 255
     95a:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <cnt>
     95e:	26 c3       	rjmp	.+1612   	; 0xfac <Motor_Tick+0x758>
			break;
			
		case READ_KEY_INIT_2:
			if((checker2 == 1) && (bt_check == 0)){motor_state = READ_KEY_WAIT_3;}
     960:	80 91 8f 07 	lds	r24, 0x078F	; 0x80078f <checker2>
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	41 f4       	brne	.+16     	; 0x978 <Motor_Tick+0x124>
     968:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
     96c:	81 11       	cpse	r24, r1
     96e:	e5 c0       	rjmp	.+458    	; 0xb3a <Motor_Tick+0x2e6>
     970:	88 e0       	ldi	r24, 0x08	; 8
     972:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     976:	1a c3       	rjmp	.+1588   	; 0xfac <Motor_Tick+0x758>
			else if((checker2 == 0) && (bt_check == 1)){motor_state = UNLOCK;}
     978:	81 11       	cpse	r24, r1
     97a:	df c0       	rjmp	.+446    	; 0xb3a <Motor_Tick+0x2e6>
     97c:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
     980:	81 30       	cpi	r24, 0x01	; 1
     982:	09 f0       	breq	.+2      	; 0x986 <Motor_Tick+0x132>
     984:	da c0       	rjmp	.+436    	; 0xb3a <Motor_Tick+0x2e6>
     986:	8c e0       	ldi	r24, 0x0C	; 12
     988:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     98c:	d2 c2       	rjmp	.+1444   	; 0xf32 <Motor_Tick+0x6de>
			else if((checker2 == 0) && (bt_check == 0)){motor_state = READ_KEY_INIT_2;}
			break;
			
		case READ_KEY_WAIT_3:
			if(cnt > 200){motor_state = READ_KEY_INIT_3; cnt = 0;}
     98e:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <cnt>
     992:	89 3c       	cpi	r24, 0xC9	; 201
     994:	30 f0       	brcs	.+12     	; 0x9a2 <Motor_Tick+0x14e>
     996:	89 e0       	ldi	r24, 0x09	; 9
     998:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     99c:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <cnt>
     9a0:	18 c1       	rjmp	.+560    	; 0xbd2 <Motor_Tick+0x37e>
			else{motor_state = READ_KEY_WAIT_3; cnt = cnt + 1;}
     9a2:	8f 5f       	subi	r24, 0xFF	; 255
     9a4:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <cnt>
     9a8:	01 c3       	rjmp	.+1538   	; 0xfac <Motor_Tick+0x758>
			break;
			
		case READ_KEY_INIT_3:
			if((checker3 == 1) && (bt_check == 0)){motor_state = READ_KEY;}
     9aa:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <checker3>
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	41 f4       	brne	.+16     	; 0x9c2 <Motor_Tick+0x16e>
     9b2:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
     9b6:	81 11       	cpse	r24, r1
     9b8:	0c c1       	rjmp	.+536    	; 0xbd2 <Motor_Tick+0x37e>
     9ba:	8a e0       	ldi	r24, 0x0A	; 10
     9bc:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     9c0:	b1 c2       	rjmp	.+1378   	; 0xf24 <Motor_Tick+0x6d0>
			else if((checker3 == 0) && (bt_check == 1)){motor_state = UNLOCK;}
     9c2:	81 11       	cpse	r24, r1
     9c4:	06 c1       	rjmp	.+524    	; 0xbd2 <Motor_Tick+0x37e>
     9c6:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	09 f0       	breq	.+2      	; 0x9d0 <Motor_Tick+0x17c>
     9ce:	01 c1       	rjmp	.+514    	; 0xbd2 <Motor_Tick+0x37e>
     9d0:	8c e0       	ldi	r24, 0x0C	; 12
     9d2:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     9d6:	ad c2       	rjmp	.+1370   	; 0xf32 <Motor_Tick+0x6de>
			else if((checker3 == 0) && (bt_check == 0)){motor_state = READ_KEY_INIT_3;}
			break;
			
		case READ_KEY:
			if (lr == 2){motor_state = UNLOCK;}
     9d8:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <lr>
     9dc:	82 30       	cpi	r24, 0x02	; 2
     9de:	09 f0       	breq	.+2      	; 0x9e2 <Motor_Tick+0x18e>
     9e0:	a1 c2       	rjmp	.+1346   	; 0xf24 <Motor_Tick+0x6d0>
     9e2:	8c e0       	ldi	r24, 0x0C	; 12
     9e4:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     9e8:	a1 c1       	rjmp	.+834    	; 0xd2c <Motor_Tick+0x4d8>
			else {motor_state = READ_KEY;}
			break;
		
		case UNLOCK:
			if(cnt > 200) {motor_state = LOCK; cnt = 0; motion_sensor = 0;}
     9ea:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <cnt>
     9ee:	89 3c       	cpi	r24, 0xC9	; 201
     9f0:	30 f0       	brcs	.+12     	; 0x9fe <Motor_Tick+0x1aa>
     9f2:	8b e0       	ldi	r24, 0x0B	; 11
     9f4:	80 93 e9 09 	sts	0x09E9, r24	; 0x8009e9 <motor_state>
     9f8:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <cnt>
     9fc:	83 c2       	rjmp	.+1286   	; 0xf04 <Motor_Tick+0x6b0>
			else {motor_state = UNLOCK; cnt = cnt + 1;}
     9fe:	8f 5f       	subi	r24, 0xFF	; 255
     a00:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <cnt>
     a04:	96 c2       	rjmp	.+1324   	; 0xf32 <Motor_Tick+0x6de>
			break;
			
		case LOCK:
			if(cnt > 200) {motor_state = READ_MOTION; cnt = 0; lr = 0; motion_sensor = 0;}
     a06:	80 91 93 07 	lds	r24, 0x0793	; 0x800793 <cnt>
     a0a:	89 3c       	cpi	r24, 0xC9	; 201
     a0c:	40 f0       	brcs	.+16     	; 0xa1e <Motor_Tick+0x1ca>
     a0e:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <motor_state>
     a12:	10 92 93 07 	sts	0x0793, r1	; 0x800793 <cnt>
     a16:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <lr>
			
			
	switch(motor_state)
	{
		case READ_MOTION:
			PORTD = SetBit(PORTD,4,0); //GARAGE LIGHT OFF
     a1a:	5c 98       	cbi	0x0b, 4	; 11
     a1c:	07 c0       	rjmp	.+14     	; 0xa2c <Motor_Tick+0x1d8>
			else {motor_state = UNLOCK; cnt = cnt + 1;}
			break;
			
		case LOCK:
			if(cnt > 200) {motor_state = READ_MOTION; cnt = 0; lr = 0; motion_sensor = 0;}
			else {motor_state = LOCK; cnt = cnt + 1;}
     a1e:	8f 5f       	subi	r24, 0xFF	; 255
     a20:	80 93 93 07 	sts	0x0793, r24	; 0x800793 <cnt>
     a24:	6f c2       	rjmp	.+1246   	; 0xf04 <Motor_Tick+0x6b0>
			break;
		
		default:
			motor_state = READ_MOTION;
     a26:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <motor_state>
	switch(motor_state)
	{
		case READ_MOTION:
			PORTD = SetBit(PORTD,4,0); //GARAGE LIGHT OFF
			if (motion_sensor == 0){
				nokia_lcd_clear();
     a2a:	71 c2       	rjmp	.+1250   	; 0xf0e <Motor_Tick+0x6ba>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     a2c:	b1 dd       	rcall	.-1182   	; 0x590 <nokia_lcd_clear>
     a2e:	0d e8       	ldi	r16, 0x8D	; 141
     a30:	19 e0       	ldi	r17, 0x09	; 9
     a32:	83 e2       	ldi	r24, 0x23	; 35
     a34:	f8 01       	movw	r30, r16
    nokia_lcd.cursor_y = y;
     a36:	80 83       	st	Z, r24
     a38:	ce e8       	ldi	r28, 0x8E	; 142
     a3a:	d9 e0       	ldi	r29, 0x09	; 9
				nokia_lcd_set_cursor(35, 0);
				nokia_lcd_write_string("No", 2);
     a3c:	18 82       	st	Y, r1
     a3e:	62 e0       	ldi	r22, 0x02	; 2
     a40:	8d e0       	ldi	r24, 0x0D	; 13
     a42:	91 e0       	ldi	r25, 0x01	; 1
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     a44:	8d de       	rcall	.-742    	; 0x760 <nokia_lcd_write_string>
     a46:	8f e0       	ldi	r24, 0x0F	; 15
     a48:	f8 01       	movw	r30, r16
    nokia_lcd.cursor_y = y;
     a4a:	80 83       	st	Z, r24
     a4c:	84 e1       	ldi	r24, 0x14	; 20
				nokia_lcd_set_cursor(15, 20);
				nokia_lcd_write_string("Motion", 2);
     a4e:	88 83       	st	Y, r24
     a50:	62 e0       	ldi	r22, 0x02	; 2
     a52:	80 e1       	ldi	r24, 0x10	; 16
			}
			nokia_lcd_render();
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	84 de       	rcall	.-760    	; 0x760 <nokia_lcd_write_string>
			break;
     a58:	95 de       	rcall	.-726    	; 0x784 <nokia_lcd_render>
			
		case MENU:
			menu_key = GetKeypadKey();
			if ((menu_key == 'A')){
				menu_check = 1;
     a5a:	a8 c2       	rjmp	.+1360   	; 0xfac <Motor_Tick+0x758>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <menu_check>
			}
			else if ((menu_key == 'B')){
     a62:	0e c0       	rjmp	.+28     	; 0xa80 <Motor_Tick+0x22c>
     a64:	82 34       	cpi	r24, 0x42	; 66
				menu_check = 2;
     a66:	21 f4       	brne	.+8      	; 0xa70 <Motor_Tick+0x21c>
     a68:	82 e0       	ldi	r24, 0x02	; 2
     a6a:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <menu_check>
			}
			else if ((menu_key == 'C')){
     a6e:	08 c0       	rjmp	.+16     	; 0xa80 <Motor_Tick+0x22c>
     a70:	83 34       	cpi	r24, 0x43	; 67
				menu_check = 3;
     a72:	21 f4       	brne	.+8      	; 0xa7c <Motor_Tick+0x228>
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	80 93 91 07 	sts	0x0791, r24	; 0x800791 <menu_check>
			}
			else{
				menu_check = 0;
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <Motor_Tick+0x22c>
			}
			nokia_lcd_clear();
     a7c:	10 92 91 07 	sts	0x0791, r1	; 0x800791 <menu_check>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     a80:	87 dd       	rcall	.-1266   	; 0x590 <nokia_lcd_clear>
     a82:	0d e8       	ldi	r16, 0x8D	; 141
     a84:	19 e0       	ldi	r17, 0x09	; 9
     a86:	f8 01       	movw	r30, r16
    nokia_lcd.cursor_y = y;
     a88:	10 82       	st	Z, r1
     a8a:	ce e8       	ldi	r28, 0x8E	; 142
     a8c:	d9 e0       	ldi	r29, 0x09	; 9
			nokia_lcd_set_cursor(0, 10);
			nokia_lcd_write_string("A-enter code", 1);
     a8e:	8a e0       	ldi	r24, 0x0A	; 10
     a90:	88 83       	st	Y, r24
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	87 e1       	ldi	r24, 0x17	; 23
     a96:	91 e0       	ldi	r25, 0x01	; 1
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     a98:	63 de       	rcall	.-826    	; 0x760 <nokia_lcd_write_string>
    nokia_lcd.cursor_y = y;
     a9a:	f8 01       	movw	r30, r16
     a9c:	10 82       	st	Z, r1
			nokia_lcd_set_cursor(0, 20);
			nokia_lcd_write_string("B-change code", 1);
     a9e:	84 e1       	ldi	r24, 0x14	; 20
     aa0:	88 83       	st	Y, r24
     aa2:	61 e0       	ldi	r22, 0x01	; 1
     aa4:	84 e2       	ldi	r24, 0x24	; 36
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	5b de       	rcall	.-842    	; 0x760 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 30);
			nokia_lcd_write_string("C-check code", 1);
     aaa:	f8 01       	movw	r30, r16
     aac:	10 82       	st	Z, r1
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	88 83       	st	Y, r24
     ab2:	61 e0       	ldi	r22, 0x01	; 1
			nokia_lcd_render();
     ab4:	82 e3       	ldi	r24, 0x32	; 50
//Functionality - checks if USART has recieved data
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_HasReceived(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << RXC0)) : (UCSR1A & (1 << RXC1));
     ab6:	91 e0       	ldi	r25, 0x01	; 1
     ab8:	53 de       	rcall	.-858    	; 0x760 <nokia_lcd_write_string>
			
		case READ_KEY_WAIT:
			break;	
			
		case READ_KEY_INIT:
			if((USART_HasReceived(0))){
     aba:	64 de       	rcall	.-824    	; 0x784 <nokia_lcd_render>
				bt_check = 1;
     abc:	77 c2       	rjmp	.+1262   	; 0xfac <Motor_Tick+0x758>
     abe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				key = USART_Receive(0);
     ac2:	88 23       	and	r24, r24
     ac4:	54 f4       	brge	.+20     	; 0xada <Motor_Tick+0x286>
     ac6:	81 e0       	ldi	r24, 0x01	; 1
				USART_Flush(0);
     ac8:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <bt_check>
     acc:	80 e0       	ldi	r24, 0x00	; 0
     ace:	b0 de       	rcall	.-672    	; 0x830 <USART_Receive>
			}
			else{
				bt_check = 0;
     ad0:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <key>
				key = GetKeypadKey();
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	8f de       	rcall	.-738    	; 0x7f6 <USART_Flush>
				if ((key != '\0')){
     ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <Motor_Tick+0x2a0>
     ada:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <bt_check>
					checker = 1;
     ade:	d4 dc       	rcall	.-1624   	; 0x488 <GetKeypadKey>
     ae0:	80 93 ea 09 	sts	0x09EA, r24	; 0x8009ea <key>
				}
				else{
					checker = 0;
     ae4:	88 23       	and	r24, r24
     ae6:	21 f0       	breq	.+8      	; 0xaf0 <Motor_Tick+0x29c>
				}
			}
				
			nokia_lcd_clear();
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	80 93 90 07 	sts	0x0790, r24	; 0x800790 <checker>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <Motor_Tick+0x2a0>
     af0:	10 92 90 07 	sts	0x0790, r1	; 0x800790 <checker>
     af4:	4d dd       	rcall	.-1382   	; 0x590 <nokia_lcd_clear>
     af6:	0f 2e       	mov	r0, r31
     af8:	fd e8       	ldi	r31, 0x8D	; 141
     afa:	ef 2e       	mov	r14, r31
    nokia_lcd.cursor_y = y;
     afc:	f9 e0       	ldi	r31, 0x09	; 9
     afe:	ff 2e       	mov	r15, r31
			nokia_lcd_set_cursor(30, 0);
			nokia_lcd_write_string("CODE?", 1);
     b00:	f0 2d       	mov	r31, r0
     b02:	1e e1       	ldi	r17, 0x1E	; 30
     b04:	f7 01       	movw	r30, r14
     b06:	10 83       	st	Z, r17
     b08:	ce e8       	ldi	r28, 0x8E	; 142
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     b0a:	d9 e0       	ldi	r29, 0x09	; 9
    nokia_lcd.cursor_y = y;
     b0c:	18 82       	st	Y, r1
			nokia_lcd_set_cursor(10, 30);
			
			nokia_lcd_write_string("Entry: ", 1);
     b0e:	61 e0       	ldi	r22, 0x01	; 1
     b10:	8b e4       	ldi	r24, 0x4B	; 75
     b12:	91 e0       	ldi	r25, 0x01	; 1
     b14:	25 de       	rcall	.-950    	; 0x760 <nokia_lcd_write_string>
     b16:	8a e0       	ldi	r24, 0x0A	; 10
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     b18:	f7 01       	movw	r30, r14
     b1a:	80 83       	st	Z, r24
			nokia_lcd_set_cursor(50, 30);
			nokia_lcd_write_char(key, 1);
     b1c:	18 83       	st	Y, r17
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	8f e3       	ldi	r24, 0x3F	; 63
     b22:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_render();
     b24:	1d de       	rcall	.-966    	; 0x760 <nokia_lcd_write_string>
     b26:	82 e3       	ldi	r24, 0x32	; 50
			break;
     b28:	f7 01       	movw	r30, r14
     b2a:	80 83       	st	Z, r24
     b2c:	18 83       	st	Y, r17
			
		case READ_KEY_WAIT_2:
			break;
			
		case READ_KEY_INIT_2:
			if((USART_HasReceived(0))){
     b2e:	61 e0       	ldi	r22, 0x01	; 1
				bt_check = 1;
     b30:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <key>
     b34:	69 dd       	rcall	.-1326   	; 0x608 <nokia_lcd_write_char>
				key2 = USART_Receive(0);
     b36:	26 de       	rcall	.-948    	; 0x784 <nokia_lcd_render>
     b38:	39 c2       	rjmp	.+1138   	; 0xfac <Motor_Tick+0x758>
     b3a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     b3e:	88 23       	and	r24, r24
				USART_Flush(0);
     b40:	54 f4       	brge	.+20     	; 0xb56 <Motor_Tick+0x302>
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <bt_check>
			}
			else{
				
				if(bt_check == 1){bt_check = 1;}
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	72 de       	rcall	.-796    	; 0x830 <USART_Receive>
     b4c:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <key2>
				else{bt_check = 0;}
     b50:	80 e0       	ldi	r24, 0x00	; 0
					
				key2 = GetKeypadKey();
     b52:	51 de       	rcall	.-862    	; 0x7f6 <USART_Flush>
     b54:	11 c0       	rjmp	.+34     	; 0xb78 <Motor_Tick+0x324>
     b56:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
				if ((key2 != '\0')){
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	11 f0       	breq	.+4      	; 0xb62 <Motor_Tick+0x30e>
					checker2 = 1;
     b5e:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <bt_check>
     b62:	92 dc       	rcall	.-1756   	; 0x488 <GetKeypadKey>
				}
				else{
					checker2 = 0;
     b64:	80 93 f0 09 	sts	0x09F0, r24	; 0x8009f0 <key2>
				}
			}
			
			nokia_lcd_clear();
     b68:	88 23       	and	r24, r24
     b6a:	21 f0       	breq	.+8      	; 0xb74 <Motor_Tick+0x320>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 8f 07 	sts	0x078F, r24	; 0x80078f <checker2>
     b72:	02 c0       	rjmp	.+4      	; 0xb78 <Motor_Tick+0x324>
     b74:	10 92 8f 07 	sts	0x078F, r1	; 0x80078f <checker2>
     b78:	0b dd       	rcall	.-1514   	; 0x590 <nokia_lcd_clear>
    nokia_lcd.cursor_y = y;
     b7a:	0d e8       	ldi	r16, 0x8D	; 141
     b7c:	19 e0       	ldi	r17, 0x09	; 9
     b7e:	0f 2e       	mov	r0, r31
			nokia_lcd_set_cursor(10, 0);
			nokia_lcd_write_string("PASSCODE?", 1);
     b80:	fa e0       	ldi	r31, 0x0A	; 10
     b82:	ff 2e       	mov	r15, r31
     b84:	f0 2d       	mov	r31, r0
     b86:	f8 01       	movw	r30, r16
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     b88:	f0 82       	st	Z, r15
     b8a:	ce e8       	ldi	r28, 0x8E	; 142
    nokia_lcd.cursor_y = y;
     b8c:	d9 e0       	ldi	r29, 0x09	; 9
     b8e:	18 82       	st	Y, r1
     b90:	61 e0       	ldi	r22, 0x01	; 1
			
			nokia_lcd_set_cursor(10, 30);
			nokia_lcd_write_string("Entry: ", 1);
     b92:	87 e4       	ldi	r24, 0x47	; 71
     b94:	91 e0       	ldi	r25, 0x01	; 1
     b96:	e4 dd       	rcall	.-1080   	; 0x760 <nokia_lcd_write_string>
     b98:	f8 01       	movw	r30, r16
     b9a:	f0 82       	st	Z, r15
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     b9c:	0f 2e       	mov	r0, r31
     b9e:	fe e1       	ldi	r31, 0x1E	; 30
			nokia_lcd_set_cursor(50, 30);
			nokia_lcd_write_char(key, 1);
     ba0:	ff 2e       	mov	r15, r31
     ba2:	f0 2d       	mov	r31, r0
     ba4:	f8 82       	st	Y, r15
     ba6:	61 e0       	ldi	r22, 0x01	; 1
     ba8:	8f e3       	ldi	r24, 0x3F	; 63
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	d9 dd       	rcall	.-1102   	; 0x760 <nokia_lcd_write_string>
    nokia_lcd.cursor_y = y;
     bae:	82 e3       	ldi	r24, 0x32	; 50
			nokia_lcd_set_cursor(60, 30);
			nokia_lcd_write_char(key2, 1);
     bb0:	f8 01       	movw	r30, r16
     bb2:	80 83       	st	Z, r24
     bb4:	f8 82       	st	Y, r15
     bb6:	61 e0       	ldi	r22, 0x01	; 1
			nokia_lcd_render();
     bb8:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <key>
			break;
     bbc:	25 dd       	rcall	.-1462   	; 0x608 <nokia_lcd_write_char>
     bbe:	8c e3       	ldi	r24, 0x3C	; 60
     bc0:	f8 01       	movw	r30, r16
			
		case READ_KEY_WAIT_3:
			break;
		
		case READ_KEY_INIT_3:
			if((USART_HasReceived(0))){
     bc2:	80 83       	st	Z, r24
     bc4:	f8 82       	st	Y, r15
				bt_check = 1;
     bc6:	61 e0       	ldi	r22, 0x01	; 1
     bc8:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <key2>
				key3 = USART_Receive(0);
     bcc:	1d dd       	rcall	.-1478   	; 0x608 <nokia_lcd_write_char>
     bce:	da dd       	rcall	.-1100   	; 0x784 <nokia_lcd_render>
     bd0:	ed c1       	rjmp	.+986    	; 0xfac <Motor_Tick+0x758>
     bd2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
				USART_Flush(0);
     bd6:	88 23       	and	r24, r24
     bd8:	54 f4       	brge	.+20     	; 0xbee <Motor_Tick+0x39a>
     bda:	81 e0       	ldi	r24, 0x01	; 1
			}
			else{
			
				if(bt_check == 1){bt_check = 1;}
     bdc:	80 93 92 07 	sts	0x0792, r24	; 0x800792 <bt_check>
     be0:	80 e0       	ldi	r24, 0x00	; 0
				else{bt_check = 0;}
     be2:	26 de       	rcall	.-948    	; 0x830 <USART_Receive>
			
				key3 = GetKeypadKey();
     be4:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <key3>
     be8:	80 e0       	ldi	r24, 0x00	; 0
     bea:	05 de       	rcall	.-1014   	; 0x7f6 <USART_Flush>
				if ((key3 != '\0')){
     bec:	11 c0       	rjmp	.+34     	; 0xc10 <Motor_Tick+0x3bc>
     bee:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
					checker3 = 1;
     bf2:	81 30       	cpi	r24, 0x01	; 1
     bf4:	11 f0       	breq	.+4      	; 0xbfa <Motor_Tick+0x3a6>
				}
				else{
					checker3 = 0;
     bf6:	10 92 92 07 	sts	0x0792, r1	; 0x800792 <bt_check>
				}
			}
		
			nokia_lcd_clear();
     bfa:	46 dc       	rcall	.-1908   	; 0x488 <GetKeypadKey>
     bfc:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <key3>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     c00:	88 23       	and	r24, r24
     c02:	21 f0       	breq	.+8      	; 0xc0c <Motor_Tick+0x3b8>
     c04:	81 e0       	ldi	r24, 0x01	; 1
     c06:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <checker3>
     c0a:	02 c0       	rjmp	.+4      	; 0xc10 <Motor_Tick+0x3bc>
    nokia_lcd.cursor_y = y;
     c0c:	10 92 8e 07 	sts	0x078E, r1	; 0x80078e <checker3>
			nokia_lcd_set_cursor(10, 0);
			nokia_lcd_write_string("PASSCODE?", 1);
     c10:	bf dc       	rcall	.-1666   	; 0x590 <nokia_lcd_clear>
     c12:	0d e8       	ldi	r16, 0x8D	; 141
     c14:	19 e0       	ldi	r17, 0x09	; 9
     c16:	0f 2e       	mov	r0, r31
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     c18:	fa e0       	ldi	r31, 0x0A	; 10
     c1a:	ff 2e       	mov	r15, r31
    nokia_lcd.cursor_y = y;
     c1c:	f0 2d       	mov	r31, r0
     c1e:	f8 01       	movw	r30, r16
     c20:	f0 82       	st	Z, r15
		
			nokia_lcd_set_cursor(10, 30);
			nokia_lcd_write_string("Entry: ", 1);
     c22:	ce e8       	ldi	r28, 0x8E	; 142
     c24:	d9 e0       	ldi	r29, 0x09	; 9
     c26:	18 82       	st	Y, r1
     c28:	61 e0       	ldi	r22, 0x01	; 1
     c2a:	87 e4       	ldi	r24, 0x47	; 71
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     c2c:	91 e0       	ldi	r25, 0x01	; 1
     c2e:	98 dd       	rcall	.-1232   	; 0x760 <nokia_lcd_write_string>
     c30:	f8 01       	movw	r30, r16
    nokia_lcd.cursor_y = y;
     c32:	f0 82       	st	Z, r15
			nokia_lcd_set_cursor(50, 30);
			nokia_lcd_write_char(key, 1);
     c34:	0f 2e       	mov	r0, r31
     c36:	fe e1       	ldi	r31, 0x1E	; 30
     c38:	ff 2e       	mov	r15, r31
     c3a:	f0 2d       	mov	r31, r0
     c3c:	f8 82       	st	Y, r15
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	8f e3       	ldi	r24, 0x3F	; 63
    nokia_lcd.cursor_y = y;
     c42:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_set_cursor(60, 30);
			nokia_lcd_write_char(key2, 1);
     c44:	8d dd       	rcall	.-1254   	; 0x760 <nokia_lcd_write_string>
     c46:	82 e3       	ldi	r24, 0x32	; 50
     c48:	f8 01       	movw	r30, r16
     c4a:	80 83       	st	Z, r24
     c4c:	f8 82       	st	Y, r15
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     c4e:	61 e0       	ldi	r22, 0x01	; 1
     c50:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <key>
    nokia_lcd.cursor_y = y;
     c54:	d9 dc       	rcall	.-1614   	; 0x608 <nokia_lcd_write_char>
			nokia_lcd_set_cursor(70, 30);
			nokia_lcd_write_char(key3, 1);
     c56:	8c e3       	ldi	r24, 0x3C	; 60
     c58:	f8 01       	movw	r30, r16
     c5a:	80 83       	st	Z, r24
     c5c:	f8 82       	st	Y, r15
			nokia_lcd_render();
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <key2>
			break;
			
			
		case READ_KEY:
			if((key == password) && (key2 == password2) && (key3 == password3)){ //LOCK = 1 2
     c64:	d1 dc       	rcall	.-1630   	; 0x608 <nokia_lcd_write_char>
     c66:	86 e4       	ldi	r24, 0x46	; 70
     c68:	f8 01       	movw	r30, r16
     c6a:	80 83       	st	Z, r24
     c6c:	f8 82       	st	Y, r15
     c6e:	61 e0       	ldi	r22, 0x01	; 1
     c70:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <key3>
     c74:	c9 dc       	rcall	.-1646   	; 0x608 <nokia_lcd_write_char>
     c76:	86 dd       	rcall	.-1268   	; 0x784 <nokia_lcd_render>
     c78:	99 c1       	rjmp	.+818    	; 0xfac <Motor_Tick+0x758>
				lr = 2;
     c7a:	90 91 f0 09 	lds	r25, 0x09F0	; 0x8009f0 <key2>
     c7e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <password2>
			}
			else{
				nokia_lcd_clear();
     c82:	98 13       	cpse	r25, r24
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     c84:	0a c0       	rjmp	.+20     	; 0xc9a <Motor_Tick+0x446>
     c86:	90 91 eb 09 	lds	r25, 0x09EB	; 0x8009eb <key3>
    nokia_lcd.cursor_y = y;
     c8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     c8e:	98 13       	cpse	r25, r24
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <Motor_Tick+0x446>
     c92:	82 e0       	ldi	r24, 0x02	; 2
     c94:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <lr>
				nokia_lcd_set_cursor(0, 10);
				nokia_lcd_write_string("WRONG PASSWORD", 1);
     c98:	3c c0       	rjmp	.+120    	; 0xd12 <Motor_Tick+0x4be>
     c9a:	7a dc       	rcall	.-1804   	; 0x590 <nokia_lcd_clear>
     c9c:	0d e8       	ldi	r16, 0x8D	; 141
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     c9e:	19 e0       	ldi	r17, 0x09	; 9
     ca0:	f8 01       	movw	r30, r16
    nokia_lcd.cursor_y = y;
     ca2:	10 82       	st	Z, r1
				nokia_lcd_set_cursor(0, 20);
				nokia_lcd_write_string("RESTART BOARD", 1);
     ca4:	ce e8       	ldi	r28, 0x8E	; 142
     ca6:	d9 e0       	ldi	r29, 0x09	; 9
     ca8:	0f 2e       	mov	r0, r31
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     caa:	fa e0       	ldi	r31, 0x0A	; 10
     cac:	ff 2e       	mov	r15, r31
    nokia_lcd.cursor_y = y;
     cae:	f0 2d       	mov	r31, r0
     cb0:	f8 82       	st	Y, r15
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	81 e5       	ldi	r24, 0x51	; 81
     cb6:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_set_cursor(10, 30);
				nokia_lcd_write_string("Entry: ", 1);
     cb8:	53 dd       	rcall	.-1370   	; 0x760 <nokia_lcd_write_string>
     cba:	f8 01       	movw	r30, r16
     cbc:	10 82       	st	Z, r1
     cbe:	84 e1       	ldi	r24, 0x14	; 20
     cc0:	88 83       	st	Y, r24
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	80 e6       	ldi	r24, 0x60	; 96
     cc6:	91 e0       	ldi	r25, 0x01	; 1
    nokia_lcd.cursor_y = y;
     cc8:	4b dd       	rcall	.-1386   	; 0x760 <nokia_lcd_write_string>
				nokia_lcd_set_cursor(50, 30);
				nokia_lcd_write_char(key, 1);
     cca:	f8 01       	movw	r30, r16
     ccc:	f0 82       	st	Z, r15
     cce:	0f 2e       	mov	r0, r31
     cd0:	fe e1       	ldi	r31, 0x1E	; 30
     cd2:	ff 2e       	mov	r15, r31
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     cd4:	f0 2d       	mov	r31, r0
     cd6:	f8 82       	st	Y, r15
     cd8:	61 e0       	ldi	r22, 0x01	; 1
    nokia_lcd.cursor_y = y;
     cda:	8f e3       	ldi	r24, 0x3F	; 63
				nokia_lcd_set_cursor(60, 30);
				nokia_lcd_write_char(key2, 1);
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	40 dd       	rcall	.-1408   	; 0x760 <nokia_lcd_write_string>
     ce0:	82 e3       	ldi	r24, 0x32	; 50
     ce2:	f8 01       	movw	r30, r16
     ce4:	80 83       	st	Z, r24
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     ce6:	f8 82       	st	Y, r15
     ce8:	61 e0       	ldi	r22, 0x01	; 1
     cea:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <key>
				nokia_lcd_set_cursor(70, 30);
				nokia_lcd_write_char(key3, 1);
     cee:	8c dc       	rcall	.-1768   	; 0x608 <nokia_lcd_write_char>
     cf0:	8c e3       	ldi	r24, 0x3C	; 60
     cf2:	f8 01       	movw	r30, r16
     cf4:	80 83       	st	Z, r24
     cf6:	f8 82       	st	Y, r15
				nokia_lcd_render();
     cf8:	61 e0       	ldi	r22, 0x01	; 1
     cfa:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <key2>
			}
			numPhases = 1024; //(90 / 5.625) * 64
     cfe:	84 dc       	rcall	.-1784   	; 0x608 <nokia_lcd_write_char>
     d00:	86 e4       	ldi	r24, 0x46	; 70
     d02:	f8 01       	movw	r30, r16
     d04:	80 83       	st	Z, r24
     d06:	f8 82       	st	Y, r15
     d08:	61 e0       	ldi	r22, 0x01	; 1
     d0a:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <key3>
     d0e:	7c dc       	rcall	.-1800   	; 0x608 <nokia_lcd_write_char>
     d10:	39 dd       	rcall	.-1422   	; 0x784 <nokia_lcd_render>
     d12:	80 e0       	ldi	r24, 0x00	; 0
			break;
     d14:	94 e0       	ldi	r25, 0x04	; 4
		
		case UNLOCK:
			if(lr){
				if (temp < 7) {temp = temp + 1;}
     d16:	a0 e0       	ldi	r26, 0x00	; 0
     d18:	b0 e0       	ldi	r27, 0x00	; 0
     d1a:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <numPhases>
     d1e:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <numPhases+0x1>
     d22:	a0 93 ee 09 	sts	0x09EE, r26	; 0x8009ee <numPhases+0x2>
				else {temp = 0;}
     d26:	b0 93 ef 09 	sts	0x09EF, r27	; 0x8009ef <numPhases+0x3>
			
				if((numPhases - 1) == 0)
     d2a:	40 c1       	rjmp	.+640    	; 0xfac <Motor_Tick+0x758>
     d2c:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <temp>
     d30:	87 30       	cpi	r24, 0x07	; 7
     d32:	20 f4       	brcc	.+8      	; 0xd3c <Motor_Tick+0x4e8>
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <temp>
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <Motor_Tick+0x4ec>
     d3c:	10 92 94 07 	sts	0x0794, r1	; 0x800794 <temp>
				{
					lr = 0;
     d40:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <numPhases>
				}
			} 
			if(garage_button == 8){PORTA = (loc[temp] << 4); PORTD = ((0x01 << 4) | PORTD); room = 2;}
     d44:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <numPhases+0x1>
     d48:	a0 91 ee 09 	lds	r26, 0x09EE	; 0x8009ee <numPhases+0x2>
     d4c:	b0 91 ef 09 	lds	r27, 0x09EF	; 0x8009ef <numPhases+0x3>
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	a1 05       	cpc	r26, r1
     d54:	b1 05       	cpc	r27, r1
     d56:	11 f4       	brne	.+4      	; 0xd5c <Motor_Tick+0x508>
     d58:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <lr>
     d5c:	38 30       	cpi	r19, 0x08	; 8
     d5e:	71 f4       	brne	.+28     	; 0xd7c <Motor_Tick+0x528>
			else{PORTA = loc[temp]; PORTD = SetBit(PORTD,4,0); room = 1;}
     d60:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <temp>
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	ed 5f       	subi	r30, 0xFD	; 253
     d68:	fe 4f       	sbci	r31, 0xFE	; 254
     d6a:	80 81       	ld	r24, Z
     d6c:	82 95       	swap	r24
     d6e:	80 7f       	andi	r24, 0xF0	; 240
     d70:	82 b9       	out	0x02, r24	; 2
     d72:	5c 9a       	sbi	0x0b, 4	; 11
				
			nokia_lcd_clear();
     d74:	82 e0       	ldi	r24, 0x02	; 2
     d76:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <room>
     d7a:	0b c0       	rjmp	.+22     	; 0xd92 <Motor_Tick+0x53e>
     d7c:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <temp>
     d80:	f0 e0       	ldi	r31, 0x00	; 0
    nokia_lcd.cursor_y = y;
     d82:	ed 5f       	subi	r30, 0xFD	; 253
     d84:	fe 4f       	sbci	r31, 0xFE	; 254
     d86:	80 81       	ld	r24, Z
			nokia_lcd_set_cursor(10, 20);
			nokia_lcd_write_string("UNLOCKING!", 1);
     d88:	82 b9       	out	0x02, r24	; 2
     d8a:	5c 98       	cbi	0x0b, 4	; 11
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <room>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     d92:	fe db       	rcall	.-2052   	; 0x590 <nokia_lcd_clear>
    nokia_lcd.cursor_y = y;
     d94:	0d e8       	ldi	r16, 0x8D	; 141
			nokia_lcd_set_cursor(10, 30);
			nokia_lcd_write_string("Entry: ", 1);
     d96:	19 e0       	ldi	r17, 0x09	; 9
     d98:	0f 2e       	mov	r0, r31
     d9a:	fa e0       	ldi	r31, 0x0A	; 10
     d9c:	ff 2e       	mov	r15, r31
     d9e:	f0 2d       	mov	r31, r0
			if(bt_check == 0){
     da0:	f8 01       	movw	r30, r16
     da2:	f0 82       	st	Z, r15
     da4:	ce e8       	ldi	r28, 0x8E	; 142
     da6:	d9 e0       	ldi	r29, 0x09	; 9
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     da8:	84 e1       	ldi	r24, 0x14	; 20
     daa:	88 83       	st	Y, r24
     dac:	61 e0       	ldi	r22, 0x01	; 1
     dae:	8e e6       	ldi	r24, 0x6E	; 110
    nokia_lcd.cursor_y = y;
     db0:	91 e0       	ldi	r25, 0x01	; 1
				nokia_lcd_set_cursor(50, 30);
				nokia_lcd_write_char(key, 1);
     db2:	d6 dc       	rcall	.-1620   	; 0x760 <nokia_lcd_write_string>
     db4:	f8 01       	movw	r30, r16
     db6:	f0 82       	st	Z, r15
     db8:	8e e1       	ldi	r24, 0x1E	; 30
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     dba:	88 83       	st	Y, r24
     dbc:	61 e0       	ldi	r22, 0x01	; 1
     dbe:	8f e3       	ldi	r24, 0x3F	; 63
				nokia_lcd_set_cursor(60, 30);
				nokia_lcd_write_char(key2, 1);
     dc0:	91 e0       	ldi	r25, 0x01	; 1
     dc2:	ce dc       	rcall	.-1636   	; 0x760 <nokia_lcd_write_string>
     dc4:	80 91 92 07 	lds	r24, 0x0792	; 0x800792 <bt_check>
     dc8:	81 11       	cpse	r24, r1
     dca:	1b c0       	rjmp	.+54     	; 0xe02 <Motor_Tick+0x5ae>
    nokia_lcd.cursor_y = y;
     dcc:	78 01       	movw	r14, r16
				nokia_lcd_set_cursor(70, 30);
				nokia_lcd_write_char(key3, 1);
     dce:	82 e3       	ldi	r24, 0x32	; 50
     dd0:	f8 01       	movw	r30, r16
     dd2:	80 83       	st	Z, r24
     dd4:	1e e1       	ldi	r17, 0x1E	; 30
     dd6:	18 83       	st	Y, r17
     dd8:	61 e0       	ldi	r22, 0x01	; 1
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     dda:	80 91 ea 09 	lds	r24, 0x09EA	; 0x8009ea <key>
     dde:	14 dc       	rcall	.-2008   	; 0x608 <nokia_lcd_write_char>
    nokia_lcd.cursor_y = y;
     de0:	8c e3       	ldi	r24, 0x3C	; 60
     de2:	f7 01       	movw	r30, r14
     de4:	80 83       	st	Z, r24
			}
			else{
				nokia_lcd_set_cursor(50, 30);
				nokia_lcd_write_string("Phone", 1);
     de6:	18 83       	st	Y, r17
     de8:	61 e0       	ldi	r22, 0x01	; 1
     dea:	80 91 f0 09 	lds	r24, 0x09F0	; 0x8009f0 <key2>
     dee:	0c dc       	rcall	.-2024   	; 0x608 <nokia_lcd_write_char>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     df0:	86 e4       	ldi	r24, 0x46	; 70
     df2:	f7 01       	movw	r30, r14
     df4:	80 83       	st	Z, r24
     df6:	18 83       	st	Y, r17
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	80 91 eb 09 	lds	r24, 0x09EB	; 0x8009eb <key3>
     dfe:	04 dc       	rcall	.-2040   	; 0x608 <nokia_lcd_write_char>
     e00:	0a c0       	rjmp	.+20     	; 0xe16 <Motor_Tick+0x5c2>
    nokia_lcd.cursor_y = y;
     e02:	82 e3       	ldi	r24, 0x32	; 50
     e04:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <nokia_lcd+0x1f8>
     e08:	8e e1       	ldi	r24, 0x1E	; 30
			}
			nokia_lcd_set_cursor(10, 40);
			nokia_lcd_write_string("Room: ", 1);
     e0a:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <nokia_lcd+0x1f9>
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	89 e7       	ldi	r24, 0x79	; 121
     e12:	91 e0       	ldi	r25, 0x01	; 1
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     e14:	a5 dc       	rcall	.-1718   	; 0x760 <nokia_lcd_write_string>
     e16:	0f 2e       	mov	r0, r31
     e18:	fd e8       	ldi	r31, 0x8D	; 141
    nokia_lcd.cursor_y = y;
     e1a:	ef 2e       	mov	r14, r31
			nokia_lcd_set_cursor(65, 40);
			nokia_lcd_write_char(room + '0', 1);
     e1c:	f9 e0       	ldi	r31, 0x09	; 9
     e1e:	ff 2e       	mov	r15, r31
     e20:	f0 2d       	mov	r31, r0
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	f7 01       	movw	r30, r14
     e26:	80 83       	st	Z, r24
			nokia_lcd_render();
     e28:	ce e8       	ldi	r28, 0x8E	; 142
			break;
     e2a:	d9 e0       	ldi	r29, 0x09	; 9
			
		case LOCK:
			if(lr){
				if (temp > 0) {temp = temp - 1;}
     e2c:	18 e2       	ldi	r17, 0x28	; 40
     e2e:	18 83       	st	Y, r17
     e30:	61 e0       	ldi	r22, 0x01	; 1
     e32:	8f e7       	ldi	r24, 0x7F	; 127
     e34:	91 e0       	ldi	r25, 0x01	; 1
     e36:	94 dc       	rcall	.-1752   	; 0x760 <nokia_lcd_write_string>
     e38:	81 e4       	ldi	r24, 0x41	; 65
     e3a:	f7 01       	movw	r30, r14
				else {temp = 7;}
     e3c:	80 83       	st	Z, r24
     e3e:	18 83       	st	Y, r17
     e40:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <room>
			
				if((numPhases - 1) == 0)
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	80 5d       	subi	r24, 0xD0	; 208
     e48:	df db       	rcall	.-2114   	; 0x608 <nokia_lcd_write_char>
     e4a:	9c dc       	rcall	.-1736   	; 0x784 <nokia_lcd_render>
     e4c:	af c0       	rjmp	.+350    	; 0xfac <Motor_Tick+0x758>
     e4e:	80 91 94 07 	lds	r24, 0x0794	; 0x800794 <temp>
     e52:	88 23       	and	r24, r24
     e54:	21 f0       	breq	.+8      	; 0xe5e <Motor_Tick+0x60a>
     e56:	81 50       	subi	r24, 0x01	; 1
				{
					lr = 0;
     e58:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <temp>
				}
				
			}
			if(garage_button == 8){PORTA = (loc[temp] << 4); PORTD = ((0x01 << 4) | PORTD); room = 2;}
     e5c:	03 c0       	rjmp	.+6      	; 0xe64 <Motor_Tick+0x610>
     e5e:	87 e0       	ldi	r24, 0x07	; 7
     e60:	80 93 94 07 	sts	0x0794, r24	; 0x800794 <temp>
     e64:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <numPhases>
     e68:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <numPhases+0x1>
     e6c:	a0 91 ee 09 	lds	r26, 0x09EE	; 0x8009ee <numPhases+0x2>
     e70:	b0 91 ef 09 	lds	r27, 0x09EF	; 0x8009ef <numPhases+0x3>
			else{PORTA = loc[temp]; PORTD = SetBit(PORTD,4,0); room = 1;}
     e74:	01 97       	sbiw	r24, 0x01	; 1
     e76:	a1 05       	cpc	r26, r1
     e78:	b1 05       	cpc	r27, r1
     e7a:	11 f4       	brne	.+4      	; 0xe80 <Motor_Tick+0x62c>
     e7c:	10 92 8d 07 	sts	0x078D, r1	; 0x80078d <lr>
     e80:	38 30       	cpi	r19, 0x08	; 8
     e82:	71 f4       	brne	.+28     	; 0xea0 <Motor_Tick+0x64c>
     e84:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <temp>
			
			nokia_lcd_clear();
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	ed 5f       	subi	r30, 0xFD	; 253
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     e8c:	fe 4f       	sbci	r31, 0xFE	; 254
     e8e:	80 81       	ld	r24, Z
     e90:	82 95       	swap	r24
     e92:	80 7f       	andi	r24, 0xF0	; 240
     e94:	82 b9       	out	0x02, r24	; 2
     e96:	5c 9a       	sbi	0x0b, 4	; 11
     e98:	82 e0       	ldi	r24, 0x02	; 2
     e9a:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <room>
    nokia_lcd.cursor_y = y;
     e9e:	0b c0       	rjmp	.+22     	; 0xeb6 <Motor_Tick+0x662>
     ea0:	e0 91 94 07 	lds	r30, 0x0794	; 0x800794 <temp>
			nokia_lcd_set_cursor(10, 20);
			nokia_lcd_write_string("LOCKING!", 1);
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	ed 5f       	subi	r30, 0xFD	; 253
     ea8:	fe 4f       	sbci	r31, 0xFE	; 254
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     eaa:	80 81       	ld	r24, Z
     eac:	82 b9       	out	0x02, r24	; 2
    nokia_lcd.cursor_y = y;
     eae:	5c 98       	cbi	0x0b, 4	; 11
     eb0:	81 e0       	ldi	r24, 0x01	; 1
     eb2:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <room>
     eb6:	6c db       	rcall	.-2344   	; 0x590 <nokia_lcd_clear>
			nokia_lcd_set_cursor(10, 40);
			nokia_lcd_write_string("Room: ", 1);
     eb8:	0d e8       	ldi	r16, 0x8D	; 141
     eba:	19 e0       	ldi	r17, 0x09	; 9
     ebc:	0f 2e       	mov	r0, r31
     ebe:	fa e0       	ldi	r31, 0x0A	; 10
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     ec0:	ff 2e       	mov	r15, r31
     ec2:	f0 2d       	mov	r31, r0
    nokia_lcd.cursor_y = y;
     ec4:	f8 01       	movw	r30, r16
			nokia_lcd_set_cursor(65, 40);
			nokia_lcd_write_char(room + '0', 1);
     ec6:	f0 82       	st	Z, r15
     ec8:	ce e8       	ldi	r28, 0x8E	; 142
     eca:	d9 e0       	ldi	r29, 0x09	; 9
     ecc:	84 e1       	ldi	r24, 0x14	; 20
     ece:	88 83       	st	Y, r24
			nokia_lcd_render();
     ed0:	61 e0       	ldi	r22, 0x01	; 1
     ed2:	80 e7       	ldi	r24, 0x70	; 112
			break;
		
		default:
			break;
	}
}
     ed4:	91 e0       	ldi	r25, 0x01	; 1
			nokia_lcd_write_char(room + '0', 1);
			nokia_lcd_render();
			break;
			
		case LOCK:
			if(lr){
     ed6:	44 dc       	rcall	.-1912   	; 0x760 <nokia_lcd_write_string>
     ed8:	f8 01       	movw	r30, r16
     eda:	f0 82       	st	Z, r15
     edc:	0f 2e       	mov	r0, r31
			
			
	switch(motor_state)
	{
		case READ_MOTION:
			PORTD = SetBit(PORTD,4,0); //GARAGE LIGHT OFF
     ede:	f8 e2       	ldi	r31, 0x28	; 40
			if (motion_sensor == 0){
     ee0:	ff 2e       	mov	r15, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	f8 82       	st	Y, r15
			}
			nokia_lcd_render();
			break;
			
		case MENU:
			menu_key = GetKeypadKey();
     ee6:	61 e0       	ldi	r22, 0x01	; 1
			if ((menu_key == 'A')){
     ee8:	8f e7       	ldi	r24, 0x7F	; 127
     eea:	91 e0       	ldi	r25, 0x01	; 1
     eec:	39 dc       	rcall	.-1934   	; 0x760 <nokia_lcd_write_string>
			nokia_lcd_render();
			break;
			
			
		case READ_KEY:
			if((key == password) && (key2 == password2) && (key3 == password3)){ //LOCK = 1 2
     eee:	81 e4       	ldi	r24, 0x41	; 65
     ef0:	f8 01       	movw	r30, r16
     ef2:	80 83       	st	Z, r24
     ef4:	f8 82       	st	Y, r15
     ef6:	80 91 8c 07 	lds	r24, 0x078C	; 0x80078c <room>
			}
			numPhases = 1024; //(90 / 5.625) * 64
			break;
		
		case UNLOCK:
			if(lr){
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	80 5d       	subi	r24, 0xD0	; 208
     efe:	84 db       	rcall	.-2296   	; 0x608 <nokia_lcd_write_char>
     f00:	41 dc       	rcall	.-1918   	; 0x784 <nokia_lcd_render>
			nokia_lcd_write_char(key, 1);
			nokia_lcd_render();
			break;
			
		case CURRENT_PASS:
			nokia_lcd_clear();
     f02:	54 c0       	rjmp	.+168    	; 0xfac <Motor_Tick+0x758>
     f04:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <lr>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     f08:	81 11       	cpse	r24, r1
     f0a:	a1 cf       	rjmp	.-190    	; 0xe4e <Motor_Tick+0x5fa>
     f0c:	b9 cf       	rjmp	.-142    	; 0xe80 <Motor_Tick+0x62c>
     f0e:	5c 98       	cbi	0x0b, 4	; 11
     f10:	21 11       	cpse	r18, r1
     f12:	a2 cd       	rjmp	.-1212   	; 0xa58 <Motor_Tick+0x204>
     f14:	8b cd       	rjmp	.-1258   	; 0xa2c <Motor_Tick+0x1d8>
     f16:	b8 da       	rcall	.-2704   	; 0x488 <GetKeypadKey>
    nokia_lcd.cursor_y = y;
     f18:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <menu_key>
     f1c:	81 34       	cpi	r24, 0x41	; 65
     f1e:	09 f0       	breq	.+2      	; 0xf22 <Motor_Tick+0x6ce>
			nokia_lcd_set_cursor(5, 10);
			nokia_lcd_write_string("Current Code:", 1);
     f20:	a1 cd       	rjmp	.-1214   	; 0xa64 <Motor_Tick+0x210>
     f22:	9c cd       	rjmp	.-1224   	; 0xa5c <Motor_Tick+0x208>
     f24:	90 91 ea 09 	lds	r25, 0x09EA	; 0x8009ea <key>
     f28:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <password>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     f2c:	98 13       	cpse	r25, r24
    nokia_lcd.cursor_y = y;
     f2e:	b5 ce       	rjmp	.-662    	; 0xc9a <Motor_Tick+0x446>
     f30:	a4 ce       	rjmp	.-696    	; 0xc7a <Motor_Tick+0x426>
			nokia_lcd_set_cursor(10, 20);
			nokia_lcd_write_char(password, 1);
     f32:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <lr>
     f36:	88 23       	and	r24, r24
     f38:	09 f4       	brne	.+2      	; 0xf3c <Motor_Tick+0x6e8>
     f3a:	10 cf       	rjmp	.-480    	; 0xd5c <Motor_Tick+0x508>
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     f3c:	f7 ce       	rjmp	.-530    	; 0xd2c <Motor_Tick+0x4d8>
     f3e:	28 db       	rcall	.-2480   	; 0x590 <nokia_lcd_clear>
    nokia_lcd.cursor_y = y;
     f40:	0f 2e       	mov	r0, r31
			nokia_lcd_set_cursor(20, 20);
			nokia_lcd_write_char(password2, 1);
     f42:	fd e8       	ldi	r31, 0x8D	; 141
     f44:	ef 2e       	mov	r14, r31
     f46:	f9 e0       	ldi	r31, 0x09	; 9
     f48:	ff 2e       	mov	r15, r31
     f4a:	f0 2d       	mov	r31, r0
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     f4c:	85 e0       	ldi	r24, 0x05	; 5
     f4e:	f7 01       	movw	r30, r14
     f50:	80 83       	st	Z, r24
    nokia_lcd.cursor_y = y;
     f52:	ce e8       	ldi	r28, 0x8E	; 142
			nokia_lcd_set_cursor(30, 20);
			nokia_lcd_write_char(password3, 1);
     f54:	d9 e0       	ldi	r29, 0x09	; 9
     f56:	1a e0       	ldi	r17, 0x0A	; 10
     f58:	18 83       	st	Y, r17
     f5a:	61 e0       	ldi	r22, 0x01	; 1
     f5c:	86 e8       	ldi	r24, 0x86	; 134
			nokia_lcd_render();
     f5e:	91 e0       	ldi	r25, 0x01	; 1
     f60:	ff db       	rcall	.-2050   	; 0x760 <nokia_lcd_write_string>
			break;
     f62:	f7 01       	movw	r30, r14
			
		case CHANGE_PASS:
			nokia_lcd_clear();
     f64:	10 83       	st	Z, r17
     f66:	14 e1       	ldi	r17, 0x14	; 20
        nokia_lcd_write_char(*str++, scale);
}
  
void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
    nokia_lcd.cursor_x = x;
     f68:	18 83       	st	Y, r17
     f6a:	61 e0       	ldi	r22, 0x01	; 1
     f6c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <password>
    nokia_lcd.cursor_y = y;
     f70:	4b db       	rcall	.-2410   	; 0x608 <nokia_lcd_write_char>
     f72:	f7 01       	movw	r30, r14
			nokia_lcd_set_cursor(5, 10);
			nokia_lcd_write_string("New Code:", 1);
     f74:	10 83       	st	Z, r17
     f76:	18 83       	st	Y, r17
     f78:	61 e0       	ldi	r22, 0x01	; 1
     f7a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <password2>
			nokia_lcd_render();
     f7e:	44 db       	rcall	.-2424   	; 0x608 <nokia_lcd_write_char>
     f80:	8e e1       	ldi	r24, 0x1E	; 30
			break;
		
		default:
			break;
	}
}
     f82:	f7 01       	movw	r30, r14
     f84:	80 83       	st	Z, r24
     f86:	18 83       	st	Y, r17
     f88:	61 e0       	ldi	r22, 0x01	; 1
     f8a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     f8e:	3c db       	rcall	.-2440   	; 0x608 <nokia_lcd_write_char>
     f90:	f9 db       	rcall	.-2062   	; 0x784 <nokia_lcd_render>
     f92:	0c c0       	rjmp	.+24     	; 0xfac <Motor_Tick+0x758>
     f94:	fd da       	rcall	.-2566   	; 0x590 <nokia_lcd_clear>
     f96:	85 e0       	ldi	r24, 0x05	; 5
     f98:	80 93 8d 09 	sts	0x098D, r24	; 0x80098d <nokia_lcd+0x1f8>
     f9c:	8a e0       	ldi	r24, 0x0A	; 10
     f9e:	80 93 8e 09 	sts	0x098E, r24	; 0x80098e <nokia_lcd+0x1f9>
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	84 e9       	ldi	r24, 0x94	; 148
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	db db       	rcall	.-2122   	; 0x760 <nokia_lcd_write_string>
     faa:	ec db       	rcall	.-2088   	; 0x784 <nokia_lcd_render>
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	1f 91       	pop	r17
     fb2:	0f 91       	pop	r16
     fb4:	ff 90       	pop	r15
     fb6:	ef 90       	pop	r14
     fb8:	08 95       	ret

00000fba <MotorTask>:
//////////////////////////////////////////////////////////////////////// LOCAL VARIABLES ////////////////////////////////////////////////////////////////////////

enum MotorState {READ_MOTION, MENU, READ_KEY_WAIT, READ_KEY_INIT, CURRENT_PASS, CHANGE_PASS, READ_KEY_WAIT_2, READ_KEY_INIT_2, READ_KEY_WAIT_3, READ_KEY_INIT_3, READ_KEY, LOCK, UNLOCK} motor_state;

void Motor_Init(){
	motor_state = READ_MOTION;
     fba:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <motor_state>
{
	Motor_Init();
   for(;;) 
   { 	
	Motor_Tick();
	vTaskDelay(3); 
     fbe:	4a dc       	rcall	.-1900   	; 0x854 <Motor_Tick>
     fc0:	83 e0       	ldi	r24, 0x03	; 3
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	3e d4       	rcall	.+2172   	; 0x1842 <vTaskDelay>
     fc6:	fb cf       	rjmp	.-10     	; 0xfbe <MotorTask+0x4>

00000fc8 <StartSecPulse>:
   } 
}

void StartSecPulse(unsigned portBASE_TYPE Priority)
{
     fc8:	af 92       	push	r10
     fca:	bf 92       	push	r11
     fcc:	cf 92       	push	r12
     fce:	df 92       	push	r13
     fd0:	ef 92       	push	r14
     fd2:	ff 92       	push	r15
     fd4:	0f 93       	push	r16
	xTaskCreate(MotorTask, (signed portCHAR *)"MotorTask", configMINIMAL_STACK_SIZE, NULL, Priority, NULL );
     fd6:	a1 2c       	mov	r10, r1
     fd8:	b1 2c       	mov	r11, r1
     fda:	c1 2c       	mov	r12, r1
     fdc:	d1 2c       	mov	r13, r1
     fde:	e1 2c       	mov	r14, r1
     fe0:	f1 2c       	mov	r15, r1
     fe2:	08 2f       	mov	r16, r24
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	45 e5       	ldi	r20, 0x55	; 85
     fea:	50 e0       	ldi	r21, 0x00	; 0
     fec:	6e e9       	ldi	r22, 0x9E	; 158
     fee:	71 e0       	ldi	r23, 0x01	; 1
     ff0:	8d ed       	ldi	r24, 0xDD	; 221
     ff2:	97 e0       	ldi	r25, 0x07	; 7
     ff4:	ae d1       	rcall	.+860    	; 0x1352 <xTaskGenericCreate>
}
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	08 95       	ret

00001006 <main>:
 
int main(void) 
{
   DDRA = 0xFF; PORTA = 0x00; //stepper
    1006:	8f ef       	ldi	r24, 0xFF	; 255
    1008:	81 b9       	out	0x01, r24	; 1
    100a:	12 b8       	out	0x02, r1	; 2
   DDRB = 0xFF; PORTB = 0x00; //NOKIA 5110
    100c:	84 b9       	out	0x04, r24	; 4
    100e:	15 b8       	out	0x05, r1	; 5
   DDRC = 0xF0, PORTC = 0x0F; //calculator
    1010:	80 ef       	ldi	r24, 0xF0	; 240
    1012:	87 b9       	out	0x07, r24	; 7
    1014:	8f e0       	ldi	r24, 0x0F	; 15
    1016:	88 b9       	out	0x08, r24	; 8
   DDRD = 0xF2; PORTD = 0x0D; //D0 (Rx of Bluetooth), D2 (IR sensor), and D3 (button) inputs and rest outputs for lightbulbs and Tx of Bluetooth
    1018:	82 ef       	ldi	r24, 0xF2	; 242
    101a:	8a b9       	out	0x0a, r24	; 10
    101c:	8d e0       	ldi	r24, 0x0D	; 13
        nokia_lcd.screen[i] = 0x00;
}
  
void nokia_lcd_power(uint8_t on)
{
    write_cmd(on ? 0x20 : 0x24);
    101e:	8b b9       	out	0x0b, r24	; 11
   
   nokia_lcd_init();
   nokia_lcd_power(1);
   initUSART(0);
    1020:	81 da       	rcall	.-2814   	; 0x524 <nokia_lcd_init>
   
   //Start Tasks  
   StartSecPulse(1);
    1022:	80 e2       	ldi	r24, 0x20	; 32
    1024:	2e da       	rcall	.-2980   	; 0x482 <write_cmd>
    1026:	80 e0       	ldi	r24, 0x00	; 0
    //RunSchedular 
   vTaskStartScheduler();
    1028:	c4 db       	rcall	.-2168   	; 0x7b2 <initUSART>
    102a:	81 e0       	ldi	r24, 0x01	; 1
   eeprom_write_byte(0, password)
   password = eeprom_read_byte(0);
   eeprom_update_byte(0, )
   */
   return 0; 
}
    102c:	cd df       	rcall	.-102    	; 0xfc8 <StartSecPulse>
    102e:	92 d2       	rcall	.+1316   	; 0x1554 <vTaskStartScheduler>
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	08 95       	ret

00001036 <pxPortInitialiseStack>:
    1036:	31 e1       	ldi	r19, 0x11	; 17
    1038:	fc 01       	movw	r30, r24
    103a:	30 83       	st	Z, r19
    103c:	31 97       	sbiw	r30, 0x01	; 1
    103e:	22 e2       	ldi	r18, 0x22	; 34
    1040:	20 83       	st	Z, r18
    1042:	31 97       	sbiw	r30, 0x01	; 1
    1044:	a3 e3       	ldi	r26, 0x33	; 51
    1046:	a0 83       	st	Z, r26
    1048:	31 97       	sbiw	r30, 0x01	; 1
    104a:	60 83       	st	Z, r22
    104c:	31 97       	sbiw	r30, 0x01	; 1
    104e:	70 83       	st	Z, r23
    1050:	31 97       	sbiw	r30, 0x01	; 1
    1052:	10 82       	st	Z, r1
    1054:	31 97       	sbiw	r30, 0x01	; 1
    1056:	60 e8       	ldi	r22, 0x80	; 128
    1058:	60 83       	st	Z, r22
    105a:	31 97       	sbiw	r30, 0x01	; 1
    105c:	10 82       	st	Z, r1
    105e:	31 97       	sbiw	r30, 0x01	; 1
    1060:	62 e0       	ldi	r22, 0x02	; 2
    1062:	60 83       	st	Z, r22
    1064:	31 97       	sbiw	r30, 0x01	; 1
    1066:	63 e0       	ldi	r22, 0x03	; 3
    1068:	60 83       	st	Z, r22
    106a:	31 97       	sbiw	r30, 0x01	; 1
    106c:	64 e0       	ldi	r22, 0x04	; 4
    106e:	60 83       	st	Z, r22
    1070:	31 97       	sbiw	r30, 0x01	; 1
    1072:	65 e0       	ldi	r22, 0x05	; 5
    1074:	60 83       	st	Z, r22
    1076:	31 97       	sbiw	r30, 0x01	; 1
    1078:	66 e0       	ldi	r22, 0x06	; 6
    107a:	60 83       	st	Z, r22
    107c:	31 97       	sbiw	r30, 0x01	; 1
    107e:	67 e0       	ldi	r22, 0x07	; 7
    1080:	60 83       	st	Z, r22
    1082:	31 97       	sbiw	r30, 0x01	; 1
    1084:	68 e0       	ldi	r22, 0x08	; 8
    1086:	60 83       	st	Z, r22
    1088:	31 97       	sbiw	r30, 0x01	; 1
    108a:	69 e0       	ldi	r22, 0x09	; 9
    108c:	60 83       	st	Z, r22
    108e:	31 97       	sbiw	r30, 0x01	; 1
    1090:	60 e1       	ldi	r22, 0x10	; 16
    1092:	60 83       	st	Z, r22
    1094:	31 97       	sbiw	r30, 0x01	; 1
    1096:	30 83       	st	Z, r19
    1098:	31 97       	sbiw	r30, 0x01	; 1
    109a:	32 e1       	ldi	r19, 0x12	; 18
    109c:	30 83       	st	Z, r19
    109e:	31 97       	sbiw	r30, 0x01	; 1
    10a0:	33 e1       	ldi	r19, 0x13	; 19
    10a2:	30 83       	st	Z, r19
    10a4:	31 97       	sbiw	r30, 0x01	; 1
    10a6:	34 e1       	ldi	r19, 0x14	; 20
    10a8:	30 83       	st	Z, r19
    10aa:	31 97       	sbiw	r30, 0x01	; 1
    10ac:	35 e1       	ldi	r19, 0x15	; 21
    10ae:	30 83       	st	Z, r19
    10b0:	31 97       	sbiw	r30, 0x01	; 1
    10b2:	36 e1       	ldi	r19, 0x16	; 22
    10b4:	30 83       	st	Z, r19
    10b6:	31 97       	sbiw	r30, 0x01	; 1
    10b8:	37 e1       	ldi	r19, 0x17	; 23
    10ba:	30 83       	st	Z, r19
    10bc:	31 97       	sbiw	r30, 0x01	; 1
    10be:	38 e1       	ldi	r19, 0x18	; 24
    10c0:	30 83       	st	Z, r19
    10c2:	31 97       	sbiw	r30, 0x01	; 1
    10c4:	39 e1       	ldi	r19, 0x19	; 25
    10c6:	30 83       	st	Z, r19
    10c8:	31 97       	sbiw	r30, 0x01	; 1
    10ca:	30 e2       	ldi	r19, 0x20	; 32
    10cc:	30 83       	st	Z, r19
    10ce:	31 97       	sbiw	r30, 0x01	; 1
    10d0:	31 e2       	ldi	r19, 0x21	; 33
    10d2:	30 83       	st	Z, r19
    10d4:	31 97       	sbiw	r30, 0x01	; 1
    10d6:	20 83       	st	Z, r18
    10d8:	31 97       	sbiw	r30, 0x01	; 1
    10da:	23 e2       	ldi	r18, 0x23	; 35
    10dc:	20 83       	st	Z, r18
    10de:	31 97       	sbiw	r30, 0x01	; 1
    10e0:	40 83       	st	Z, r20
    10e2:	31 97       	sbiw	r30, 0x01	; 1
    10e4:	50 83       	st	Z, r21
    10e6:	31 97       	sbiw	r30, 0x01	; 1
    10e8:	26 e2       	ldi	r18, 0x26	; 38
    10ea:	20 83       	st	Z, r18
    10ec:	31 97       	sbiw	r30, 0x01	; 1
    10ee:	27 e2       	ldi	r18, 0x27	; 39
    10f0:	20 83       	st	Z, r18
    10f2:	31 97       	sbiw	r30, 0x01	; 1
    10f4:	28 e2       	ldi	r18, 0x28	; 40
    10f6:	20 83       	st	Z, r18
    10f8:	31 97       	sbiw	r30, 0x01	; 1
    10fa:	29 e2       	ldi	r18, 0x29	; 41
    10fc:	20 83       	st	Z, r18
    10fe:	31 97       	sbiw	r30, 0x01	; 1
    1100:	20 e3       	ldi	r18, 0x30	; 48
    1102:	20 83       	st	Z, r18
    1104:	31 97       	sbiw	r30, 0x01	; 1
    1106:	21 e3       	ldi	r18, 0x31	; 49
    1108:	20 83       	st	Z, r18
    110a:	86 97       	sbiw	r24, 0x26	; 38
    110c:	08 95       	ret

0000110e <xPortStartScheduler>:
    110e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
    1112:	8c e7       	ldi	r24, 0x7C	; 124
    1114:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    1118:	8b e0       	ldi	r24, 0x0B	; 11
    111a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    111e:	ef e6       	ldi	r30, 0x6F	; 111
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	82 60       	ori	r24, 0x02	; 2
    1126:	80 83       	st	Z, r24
    1128:	a0 91 e7 09 	lds	r26, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    112c:	b0 91 e8 09 	lds	r27, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1130:	cd 91       	ld	r28, X+
    1132:	cd bf       	out	0x3d, r28	; 61
    1134:	dd 91       	ld	r29, X+
    1136:	de bf       	out	0x3e, r29	; 62
    1138:	ff 91       	pop	r31
    113a:	ef 91       	pop	r30
    113c:	df 91       	pop	r29
    113e:	cf 91       	pop	r28
    1140:	bf 91       	pop	r27
    1142:	af 91       	pop	r26
    1144:	9f 91       	pop	r25
    1146:	8f 91       	pop	r24
    1148:	7f 91       	pop	r23
    114a:	6f 91       	pop	r22
    114c:	5f 91       	pop	r21
    114e:	4f 91       	pop	r20
    1150:	3f 91       	pop	r19
    1152:	2f 91       	pop	r18
    1154:	1f 91       	pop	r17
    1156:	0f 91       	pop	r16
    1158:	ff 90       	pop	r15
    115a:	ef 90       	pop	r14
    115c:	df 90       	pop	r13
    115e:	cf 90       	pop	r12
    1160:	bf 90       	pop	r11
    1162:	af 90       	pop	r10
    1164:	9f 90       	pop	r9
    1166:	8f 90       	pop	r8
    1168:	7f 90       	pop	r7
    116a:	6f 90       	pop	r6
    116c:	5f 90       	pop	r5
    116e:	4f 90       	pop	r4
    1170:	3f 90       	pop	r3
    1172:	2f 90       	pop	r2
    1174:	1f 90       	pop	r1
    1176:	0f 90       	pop	r0
    1178:	0f be       	out	0x3f, r0	; 63
    117a:	0f 90       	pop	r0
    117c:	08 95       	ret
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	08 95       	ret

00001182 <vPortYield>:
    1182:	0f 92       	push	r0
    1184:	0f b6       	in	r0, 0x3f	; 63
    1186:	f8 94       	cli
    1188:	0f 92       	push	r0
    118a:	1f 92       	push	r1
    118c:	11 24       	eor	r1, r1
    118e:	2f 92       	push	r2
    1190:	3f 92       	push	r3
    1192:	4f 92       	push	r4
    1194:	5f 92       	push	r5
    1196:	6f 92       	push	r6
    1198:	7f 92       	push	r7
    119a:	8f 92       	push	r8
    119c:	9f 92       	push	r9
    119e:	af 92       	push	r10
    11a0:	bf 92       	push	r11
    11a2:	cf 92       	push	r12
    11a4:	df 92       	push	r13
    11a6:	ef 92       	push	r14
    11a8:	ff 92       	push	r15
    11aa:	0f 93       	push	r16
    11ac:	1f 93       	push	r17
    11ae:	2f 93       	push	r18
    11b0:	3f 93       	push	r19
    11b2:	4f 93       	push	r20
    11b4:	5f 93       	push	r21
    11b6:	6f 93       	push	r22
    11b8:	7f 93       	push	r23
    11ba:	8f 93       	push	r24
    11bc:	9f 93       	push	r25
    11be:	af 93       	push	r26
    11c0:	bf 93       	push	r27
    11c2:	cf 93       	push	r28
    11c4:	df 93       	push	r29
    11c6:	ef 93       	push	r30
    11c8:	ff 93       	push	r31
    11ca:	a0 91 e7 09 	lds	r26, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    11ce:	b0 91 e8 09 	lds	r27, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    11d2:	0d b6       	in	r0, 0x3d	; 61
    11d4:	0d 92       	st	X+, r0
    11d6:	0e b6       	in	r0, 0x3e	; 62
    11d8:	0d 92       	st	X+, r0
    11da:	88 d3       	rcall	.+1808   	; 0x18ec <vTaskSwitchContext>
    11dc:	a0 91 e7 09 	lds	r26, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    11e0:	b0 91 e8 09 	lds	r27, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    11e4:	cd 91       	ld	r28, X+
    11e6:	cd bf       	out	0x3d, r28	; 61
    11e8:	dd 91       	ld	r29, X+
    11ea:	de bf       	out	0x3e, r29	; 62
    11ec:	ff 91       	pop	r31
    11ee:	ef 91       	pop	r30
    11f0:	df 91       	pop	r29
    11f2:	cf 91       	pop	r28
    11f4:	bf 91       	pop	r27
    11f6:	af 91       	pop	r26
    11f8:	9f 91       	pop	r25
    11fa:	8f 91       	pop	r24
    11fc:	7f 91       	pop	r23
    11fe:	6f 91       	pop	r22
    1200:	5f 91       	pop	r21
    1202:	4f 91       	pop	r20
    1204:	3f 91       	pop	r19
    1206:	2f 91       	pop	r18
    1208:	1f 91       	pop	r17
    120a:	0f 91       	pop	r16
    120c:	ff 90       	pop	r15
    120e:	ef 90       	pop	r14
    1210:	df 90       	pop	r13
    1212:	cf 90       	pop	r12
    1214:	bf 90       	pop	r11
    1216:	af 90       	pop	r10
    1218:	9f 90       	pop	r9
    121a:	8f 90       	pop	r8
    121c:	7f 90       	pop	r7
    121e:	6f 90       	pop	r6
    1220:	5f 90       	pop	r5
    1222:	4f 90       	pop	r4
    1224:	3f 90       	pop	r3
    1226:	2f 90       	pop	r2
    1228:	1f 90       	pop	r1
    122a:	0f 90       	pop	r0
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	0f 90       	pop	r0
    1230:	08 95       	ret

00001232 <vPortYieldFromTick>:
    1232:	0f 92       	push	r0
    1234:	0f b6       	in	r0, 0x3f	; 63
    1236:	f8 94       	cli
    1238:	0f 92       	push	r0
    123a:	1f 92       	push	r1
    123c:	11 24       	eor	r1, r1
    123e:	2f 92       	push	r2
    1240:	3f 92       	push	r3
    1242:	4f 92       	push	r4
    1244:	5f 92       	push	r5
    1246:	6f 92       	push	r6
    1248:	7f 92       	push	r7
    124a:	8f 92       	push	r8
    124c:	9f 92       	push	r9
    124e:	af 92       	push	r10
    1250:	bf 92       	push	r11
    1252:	cf 92       	push	r12
    1254:	df 92       	push	r13
    1256:	ef 92       	push	r14
    1258:	ff 92       	push	r15
    125a:	0f 93       	push	r16
    125c:	1f 93       	push	r17
    125e:	2f 93       	push	r18
    1260:	3f 93       	push	r19
    1262:	4f 93       	push	r20
    1264:	5f 93       	push	r21
    1266:	6f 93       	push	r22
    1268:	7f 93       	push	r23
    126a:	8f 93       	push	r24
    126c:	9f 93       	push	r25
    126e:	af 93       	push	r26
    1270:	bf 93       	push	r27
    1272:	cf 93       	push	r28
    1274:	df 93       	push	r29
    1276:	ef 93       	push	r30
    1278:	ff 93       	push	r31
    127a:	a0 91 e7 09 	lds	r26, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    127e:	b0 91 e8 09 	lds	r27, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1282:	0d b6       	in	r0, 0x3d	; 61
    1284:	0d 92       	st	X+, r0
    1286:	0e b6       	in	r0, 0x3e	; 62
    1288:	0d 92       	st	X+, r0
    128a:	93 d1       	rcall	.+806    	; 0x15b2 <vTaskIncrementTick>
    128c:	2f d3       	rcall	.+1630   	; 0x18ec <vTaskSwitchContext>
    128e:	a0 91 e7 09 	lds	r26, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    1292:	b0 91 e8 09 	lds	r27, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1296:	cd 91       	ld	r28, X+
    1298:	cd bf       	out	0x3d, r28	; 61
    129a:	dd 91       	ld	r29, X+
    129c:	de bf       	out	0x3e, r29	; 62
    129e:	ff 91       	pop	r31
    12a0:	ef 91       	pop	r30
    12a2:	df 91       	pop	r29
    12a4:	cf 91       	pop	r28
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	1f 91       	pop	r17
    12bc:	0f 91       	pop	r16
    12be:	ff 90       	pop	r15
    12c0:	ef 90       	pop	r14
    12c2:	df 90       	pop	r13
    12c4:	cf 90       	pop	r12
    12c6:	bf 90       	pop	r11
    12c8:	af 90       	pop	r10
    12ca:	9f 90       	pop	r9
    12cc:	8f 90       	pop	r8
    12ce:	7f 90       	pop	r7
    12d0:	6f 90       	pop	r6
    12d2:	5f 90       	pop	r5
    12d4:	4f 90       	pop	r4
    12d6:	3f 90       	pop	r3
    12d8:	2f 90       	pop	r2
    12da:	1f 90       	pop	r1
    12dc:	0f 90       	pop	r0
    12de:	0f be       	out	0x3f, r0	; 63
    12e0:	0f 90       	pop	r0
    12e2:	08 95       	ret

000012e4 <__vector_13>:
    12e4:	a6 df       	rcall	.-180    	; 0x1232 <vPortYieldFromTick>
    12e6:	18 95       	reti

000012e8 <prvAddCurrentTaskToDelayedList>:
    12e8:	cf 93       	push	r28
    12ea:	df 93       	push	r29
    12ec:	ec 01       	movw	r28, r24
    12ee:	e0 91 e7 09 	lds	r30, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    12f2:	f0 91 e8 09 	lds	r31, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    12f6:	93 83       	std	Z+3, r25	; 0x03
    12f8:	82 83       	std	Z+2, r24	; 0x02
    12fa:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <xTickCount>
    12fe:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <xTickCount+0x1>
    1302:	c8 17       	cp	r28, r24
    1304:	d9 07       	cpc	r29, r25
    1306:	60 f4       	brcc	.+24     	; 0x1320 <prvAddCurrentTaskToDelayedList+0x38>
    1308:	60 91 e7 09 	lds	r22, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    130c:	70 91 e8 09 	lds	r23, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1310:	80 91 ad 09 	lds	r24, 0x09AD	; 0x8009ad <pxOverflowDelayedTaskList>
    1314:	90 91 ae 09 	lds	r25, 0x09AE	; 0x8009ae <pxOverflowDelayedTaskList+0x1>
    1318:	6e 5f       	subi	r22, 0xFE	; 254
    131a:	7f 4f       	sbci	r23, 0xFF	; 255
    131c:	33 d8       	rcall	.-3994   	; 0x384 <vListInsert>
    131e:	16 c0       	rjmp	.+44     	; 0x134c <prvAddCurrentTaskToDelayedList+0x64>
    1320:	60 91 e7 09 	lds	r22, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    1324:	70 91 e8 09 	lds	r23, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1328:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <pxDelayedTaskList>
    132c:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    1330:	6e 5f       	subi	r22, 0xFE	; 254
    1332:	7f 4f       	sbci	r23, 0xFF	; 255
    1334:	27 d8       	rcall	.-4018   	; 0x384 <vListInsert>
    1336:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xNextTaskUnblockTime>
    133a:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xNextTaskUnblockTime+0x1>
    133e:	c8 17       	cp	r28, r24
    1340:	d9 07       	cpc	r29, r25
    1342:	20 f4       	brcc	.+8      	; 0x134c <prvAddCurrentTaskToDelayedList+0x64>
    1344:	d0 93 0c 01 	sts	0x010C, r29	; 0x80010c <xNextTaskUnblockTime+0x1>
    1348:	c0 93 0b 01 	sts	0x010B, r28	; 0x80010b <xNextTaskUnblockTime>
    134c:	df 91       	pop	r29
    134e:	cf 91       	pop	r28
    1350:	08 95       	ret

00001352 <xTaskGenericCreate>:
    1352:	4f 92       	push	r4
    1354:	5f 92       	push	r5
    1356:	6f 92       	push	r6
    1358:	7f 92       	push	r7
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	5c 01       	movw	r10, r24
    1374:	4b 01       	movw	r8, r22
    1376:	3a 01       	movw	r6, r20
    1378:	29 01       	movw	r4, r18
    137a:	81 e2       	ldi	r24, 0x21	; 33
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pvPortMalloc>
    1382:	ec 01       	movw	r28, r24
    1384:	89 2b       	or	r24, r25
    1386:	09 f4       	brne	.+2      	; 0x138a <xTaskGenericCreate+0x38>
    1388:	d3 c0       	rjmp	.+422    	; 0x1530 <xTaskGenericCreate+0x1de>
    138a:	c1 14       	cp	r12, r1
    138c:	d1 04       	cpc	r13, r1
    138e:	09 f0       	breq	.+2      	; 0x1392 <xTaskGenericCreate+0x40>
    1390:	cb c0       	rjmp	.+406    	; 0x1528 <xTaskGenericCreate+0x1d6>
    1392:	c3 01       	movw	r24, r6
    1394:	0e 94 62 01 	call	0x2c4	; 0x2c4 <pvPortMalloc>
    1398:	98 8f       	std	Y+24, r25	; 0x18
    139a:	8f 8b       	std	Y+23, r24	; 0x17
    139c:	00 97       	sbiw	r24, 0x00	; 0
    139e:	21 f4       	brne	.+8      	; 0x13a8 <xTaskGenericCreate+0x56>
    13a0:	ce 01       	movw	r24, r28
    13a2:	0e 94 88 01 	call	0x310	; 0x310 <vPortFree>
    13a6:	c4 c0       	rjmp	.+392    	; 0x1530 <xTaskGenericCreate+0x1de>
    13a8:	a3 01       	movw	r20, r6
    13aa:	65 ea       	ldi	r22, 0xA5	; 165
    13ac:	70 e0       	ldi	r23, 0x00	; 0
    13ae:	1f d3       	rcall	.+1598   	; 0x19ee <memset>
    13b0:	93 01       	movw	r18, r6
    13b2:	21 50       	subi	r18, 0x01	; 1
    13b4:	31 09       	sbc	r19, r1
    13b6:	8f 89       	ldd	r24, Y+23	; 0x17
    13b8:	98 8d       	ldd	r25, Y+24	; 0x18
    13ba:	3c 01       	movw	r6, r24
    13bc:	62 0e       	add	r6, r18
    13be:	73 1e       	adc	r7, r19
    13c0:	48 e0       	ldi	r20, 0x08	; 8
    13c2:	50 e0       	ldi	r21, 0x00	; 0
    13c4:	b4 01       	movw	r22, r8
    13c6:	ce 01       	movw	r24, r28
    13c8:	49 96       	adiw	r24, 0x19	; 25
    13ca:	18 d3       	rcall	.+1584   	; 0x19fc <strncpy>
    13cc:	18 a2       	std	Y+32, r1	; 0x20
    13ce:	10 2f       	mov	r17, r16
    13d0:	04 30       	cpi	r16, 0x04	; 4
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <xTaskGenericCreate+0x84>
    13d4:	13 e0       	ldi	r17, 0x03	; 3
    13d6:	1e 8b       	std	Y+22, r17	; 0x16
    13d8:	6e 01       	movw	r12, r28
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	c8 0e       	add	r12, r24
    13de:	d1 1c       	adc	r13, r1
    13e0:	c6 01       	movw	r24, r12
    13e2:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialiseItem>
    13e6:	ce 01       	movw	r24, r28
    13e8:	0c 96       	adiw	r24, 0x0c	; 12
    13ea:	0e 94 97 01 	call	0x32e	; 0x32e <vListInitialiseItem>
    13ee:	d9 87       	std	Y+9, r29	; 0x09
    13f0:	c8 87       	std	Y+8, r28	; 0x08
    13f2:	84 e0       	ldi	r24, 0x04	; 4
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	81 1b       	sub	r24, r17
    13f8:	91 09       	sbc	r25, r1
    13fa:	9d 87       	std	Y+13, r25	; 0x0d
    13fc:	8c 87       	std	Y+12, r24	; 0x0c
    13fe:	db 8b       	std	Y+19, r29	; 0x13
    1400:	ca 8b       	std	Y+18, r28	; 0x12
    1402:	a2 01       	movw	r20, r4
    1404:	b5 01       	movw	r22, r10
    1406:	c3 01       	movw	r24, r6
    1408:	16 de       	rcall	.-980    	; 0x1036 <pxPortInitialiseStack>
    140a:	99 83       	std	Y+1, r25	; 0x01
    140c:	88 83       	st	Y, r24
    140e:	e1 14       	cp	r14, r1
    1410:	f1 04       	cpc	r15, r1
    1412:	19 f0       	breq	.+6      	; 0x141a <xTaskGenericCreate+0xc8>
    1414:	f7 01       	movw	r30, r14
    1416:	d1 83       	std	Z+1, r29	; 0x01
    1418:	c0 83       	st	Z, r28
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	0f 92       	push	r0
    1420:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <uxCurrentNumberOfTasks>
    1424:	8f 5f       	subi	r24, 0xFF	; 255
    1426:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <uxCurrentNumberOfTasks>
    142a:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    142e:	90 91 e8 09 	lds	r25, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1432:	89 2b       	or	r24, r25
    1434:	a9 f5       	brne	.+106    	; 0x14a0 <xTaskGenericCreate+0x14e>
    1436:	d0 93 e8 09 	sts	0x09E8, r29	; 0x8009e8 <pxCurrentTCB+0x1>
    143a:	c0 93 e7 09 	sts	0x09E7, r28	; 0x8009e7 <pxCurrentTCB>
    143e:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <uxCurrentNumberOfTasks>
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	e1 f5       	brne	.+120    	; 0x14be <xTaskGenericCreate+0x16c>
    1446:	83 ec       	ldi	r24, 0xC3	; 195
    1448:	99 e0       	ldi	r25, 0x09	; 9
    144a:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    144e:	8c ec       	ldi	r24, 0xCC	; 204
    1450:	99 e0       	ldi	r25, 0x09	; 9
    1452:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    1456:	85 ed       	ldi	r24, 0xD5	; 213
    1458:	99 e0       	ldi	r25, 0x09	; 9
    145a:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    145e:	8e ed       	ldi	r24, 0xDE	; 222
    1460:	99 e0       	ldi	r25, 0x09	; 9
    1462:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    1466:	8a eb       	ldi	r24, 0xBA	; 186
    1468:	99 e0       	ldi	r25, 0x09	; 9
    146a:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    146e:	81 eb       	ldi	r24, 0xB1	; 177
    1470:	99 e0       	ldi	r25, 0x09	; 9
    1472:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    1476:	84 ea       	ldi	r24, 0xA4	; 164
    1478:	99 e0       	ldi	r25, 0x09	; 9
    147a:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    147e:	8b e9       	ldi	r24, 0x9B	; 155
    1480:	99 e0       	ldi	r25, 0x09	; 9
    1482:	0e 94 89 01 	call	0x312	; 0x312 <vListInitialise>
    1486:	8a eb       	ldi	r24, 0xBA	; 186
    1488:	99 e0       	ldi	r25, 0x09	; 9
    148a:	90 93 b0 09 	sts	0x09B0, r25	; 0x8009b0 <pxDelayedTaskList+0x1>
    148e:	80 93 af 09 	sts	0x09AF, r24	; 0x8009af <pxDelayedTaskList>
    1492:	81 eb       	ldi	r24, 0xB1	; 177
    1494:	99 e0       	ldi	r25, 0x09	; 9
    1496:	90 93 ae 09 	sts	0x09AE, r25	; 0x8009ae <pxOverflowDelayedTaskList+0x1>
    149a:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <pxOverflowDelayedTaskList>
    149e:	0f c0       	rjmp	.+30     	; 0x14be <xTaskGenericCreate+0x16c>
    14a0:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <xSchedulerRunning>
    14a4:	81 11       	cpse	r24, r1
    14a6:	0b c0       	rjmp	.+22     	; 0x14be <xTaskGenericCreate+0x16c>
    14a8:	e0 91 e7 09 	lds	r30, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    14ac:	f0 91 e8 09 	lds	r31, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    14b0:	86 89       	ldd	r24, Z+22	; 0x16
    14b2:	08 17       	cp	r16, r24
    14b4:	20 f0       	brcs	.+8      	; 0x14be <xTaskGenericCreate+0x16c>
    14b6:	d0 93 e8 09 	sts	0x09E8, r29	; 0x8009e8 <pxCurrentTCB+0x1>
    14ba:	c0 93 e7 09 	sts	0x09E7, r28	; 0x8009e7 <pxCurrentTCB>
    14be:	8e 89       	ldd	r24, Y+22	; 0x16
    14c0:	90 91 96 09 	lds	r25, 0x0996	; 0x800996 <uxTopUsedPriority>
    14c4:	98 17       	cp	r25, r24
    14c6:	10 f4       	brcc	.+4      	; 0x14cc <xTaskGenericCreate+0x17a>
    14c8:	80 93 96 09 	sts	0x0996, r24	; 0x800996 <uxTopUsedPriority>
    14cc:	90 91 8f 09 	lds	r25, 0x098F	; 0x80098f <uxTaskNumber>
    14d0:	9f 5f       	subi	r25, 0xFF	; 255
    14d2:	90 93 8f 09 	sts	0x098F, r25	; 0x80098f <uxTaskNumber>
    14d6:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <uxTopReadyPriority>
    14da:	98 17       	cp	r25, r24
    14dc:	10 f4       	brcc	.+4      	; 0x14e2 <xTaskGenericCreate+0x190>
    14de:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <uxTopReadyPriority>
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9c 01       	movw	r18, r24
    14e6:	22 0f       	add	r18, r18
    14e8:	33 1f       	adc	r19, r19
    14ea:	22 0f       	add	r18, r18
    14ec:	33 1f       	adc	r19, r19
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	b6 01       	movw	r22, r12
    14f8:	8d 53       	subi	r24, 0x3D	; 61
    14fa:	96 4f       	sbci	r25, 0xF6	; 246
    14fc:	0e 94 9b 01 	call	0x336	; 0x336 <vListInsertEnd>
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	80 91 94 09 	lds	r24, 0x0994	; 0x800994 <xSchedulerRunning>
    1508:	88 23       	and	r24, r24
    150a:	51 f0       	breq	.+20     	; 0x1520 <xTaskGenericCreate+0x1ce>
    150c:	e0 91 e7 09 	lds	r30, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    1510:	f0 91 e8 09 	lds	r31, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1514:	86 89       	ldd	r24, Z+22	; 0x16
    1516:	80 17       	cp	r24, r16
    1518:	28 f4       	brcc	.+10     	; 0x1524 <xTaskGenericCreate+0x1d2>
    151a:	33 de       	rcall	.-922    	; 0x1182 <vPortYield>
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <xTaskGenericCreate+0x1e0>
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <xTaskGenericCreate+0x1e0>
    1524:	81 e0       	ldi	r24, 0x01	; 1
    1526:	05 c0       	rjmp	.+10     	; 0x1532 <xTaskGenericCreate+0x1e0>
    1528:	d8 8e       	std	Y+24, r13	; 0x18
    152a:	cf 8a       	std	Y+23, r12	; 0x17
    152c:	c6 01       	movw	r24, r12
    152e:	3c cf       	rjmp	.-392    	; 0x13a8 <xTaskGenericCreate+0x56>
    1530:	8f ef       	ldi	r24, 0xFF	; 255
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	ff 90       	pop	r15
    153c:	ef 90       	pop	r14
    153e:	df 90       	pop	r13
    1540:	cf 90       	pop	r12
    1542:	bf 90       	pop	r11
    1544:	af 90       	pop	r10
    1546:	9f 90       	pop	r9
    1548:	8f 90       	pop	r8
    154a:	7f 90       	pop	r7
    154c:	6f 90       	pop	r6
    154e:	5f 90       	pop	r5
    1550:	4f 90       	pop	r4
    1552:	08 95       	ret

00001554 <vTaskStartScheduler>:
    1554:	af 92       	push	r10
    1556:	bf 92       	push	r11
    1558:	cf 92       	push	r12
    155a:	df 92       	push	r13
    155c:	ef 92       	push	r14
    155e:	ff 92       	push	r15
    1560:	0f 93       	push	r16
    1562:	a1 2c       	mov	r10, r1
    1564:	b1 2c       	mov	r11, r1
    1566:	c1 2c       	mov	r12, r1
    1568:	d1 2c       	mov	r13, r1
    156a:	e1 2c       	mov	r14, r1
    156c:	f1 2c       	mov	r15, r1
    156e:	00 e0       	ldi	r16, 0x00	; 0
    1570:	20 e0       	ldi	r18, 0x00	; 0
    1572:	30 e0       	ldi	r19, 0x00	; 0
    1574:	45 e5       	ldi	r20, 0x55	; 85
    1576:	50 e0       	ldi	r21, 0x00	; 0
    1578:	68 ea       	ldi	r22, 0xA8	; 168
    157a:	71 e0       	ldi	r23, 0x01	; 1
    157c:	8d e3       	ldi	r24, 0x3D	; 61
    157e:	9c e0       	ldi	r25, 0x0C	; 12
    1580:	e8 de       	rcall	.-560    	; 0x1352 <xTaskGenericCreate>
    1582:	81 30       	cpi	r24, 0x01	; 1
    1584:	41 f4       	brne	.+16     	; 0x1596 <vTaskStartScheduler+0x42>
    1586:	f8 94       	cli
    1588:	80 93 94 09 	sts	0x0994, r24	; 0x800994 <xSchedulerRunning>
    158c:	10 92 98 09 	sts	0x0998, r1	; 0x800998 <xTickCount+0x1>
    1590:	10 92 97 09 	sts	0x0997, r1	; 0x800997 <xTickCount>
    1594:	bc dd       	rcall	.-1160   	; 0x110e <xPortStartScheduler>
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	ef 90       	pop	r14
    159c:	df 90       	pop	r13
    159e:	cf 90       	pop	r12
    15a0:	bf 90       	pop	r11
    15a2:	af 90       	pop	r10
    15a4:	08 95       	ret

000015a6 <vTaskSuspendAll>:
    15a6:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <uxSchedulerSuspended>
    15aa:	8f 5f       	subi	r24, 0xFF	; 255
    15ac:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <uxSchedulerSuspended>
    15b0:	08 95       	ret

000015b2 <vTaskIncrementTick>:
    15b2:	0f 93       	push	r16
    15b4:	1f 93       	push	r17
    15b6:	cf 93       	push	r28
    15b8:	df 93       	push	r29
    15ba:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <uxSchedulerSuspended>
    15be:	81 11       	cpse	r24, r1
    15c0:	b2 c0       	rjmp	.+356    	; 0x1726 <vTaskIncrementTick+0x174>
    15c2:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <xTickCount>
    15c6:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <xTickCount+0x1>
    15ca:	01 96       	adiw	r24, 0x01	; 1
    15cc:	90 93 98 09 	sts	0x0998, r25	; 0x800998 <xTickCount+0x1>
    15d0:	80 93 97 09 	sts	0x0997, r24	; 0x800997 <xTickCount>
    15d4:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <xTickCount>
    15d8:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <xTickCount+0x1>
    15dc:	89 2b       	or	r24, r25
    15de:	99 f5       	brne	.+102    	; 0x1646 <vTaskIncrementTick+0x94>
    15e0:	80 91 af 09 	lds	r24, 0x09AF	; 0x8009af <pxDelayedTaskList>
    15e4:	90 91 b0 09 	lds	r25, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    15e8:	20 91 ad 09 	lds	r18, 0x09AD	; 0x8009ad <pxOverflowDelayedTaskList>
    15ec:	30 91 ae 09 	lds	r19, 0x09AE	; 0x8009ae <pxOverflowDelayedTaskList+0x1>
    15f0:	30 93 b0 09 	sts	0x09B0, r19	; 0x8009b0 <pxDelayedTaskList+0x1>
    15f4:	20 93 af 09 	sts	0x09AF, r18	; 0x8009af <pxDelayedTaskList>
    15f8:	90 93 ae 09 	sts	0x09AE, r25	; 0x8009ae <pxOverflowDelayedTaskList+0x1>
    15fc:	80 93 ad 09 	sts	0x09AD, r24	; 0x8009ad <pxOverflowDelayedTaskList>
    1600:	80 91 90 09 	lds	r24, 0x0990	; 0x800990 <xNumOfOverflows>
    1604:	8f 5f       	subi	r24, 0xFF	; 255
    1606:	80 93 90 09 	sts	0x0990, r24	; 0x800990 <xNumOfOverflows>
    160a:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <pxDelayedTaskList>
    160e:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    1612:	80 81       	ld	r24, Z
    1614:	81 11       	cpse	r24, r1
    1616:	07 c0       	rjmp	.+14     	; 0x1626 <vTaskIncrementTick+0x74>
    1618:	8f ef       	ldi	r24, 0xFF	; 255
    161a:	9f ef       	ldi	r25, 0xFF	; 255
    161c:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
    1620:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
    1624:	10 c0       	rjmp	.+32     	; 0x1646 <vTaskIncrementTick+0x94>
    1626:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <pxDelayedTaskList>
    162a:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    162e:	05 80       	ldd	r0, Z+5	; 0x05
    1630:	f6 81       	ldd	r31, Z+6	; 0x06
    1632:	e0 2d       	mov	r30, r0
    1634:	06 80       	ldd	r0, Z+6	; 0x06
    1636:	f7 81       	ldd	r31, Z+7	; 0x07
    1638:	e0 2d       	mov	r30, r0
    163a:	82 81       	ldd	r24, Z+2	; 0x02
    163c:	93 81       	ldd	r25, Z+3	; 0x03
    163e:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
    1642:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
    1646:	20 91 97 09 	lds	r18, 0x0997	; 0x800997 <xTickCount>
    164a:	30 91 98 09 	lds	r19, 0x0998	; 0x800998 <xTickCount+0x1>
    164e:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <xNextTaskUnblockTime>
    1652:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <xNextTaskUnblockTime+0x1>
    1656:	28 17       	cp	r18, r24
    1658:	39 07       	cpc	r19, r25
    165a:	08 f4       	brcc	.+2      	; 0x165e <vTaskIncrementTick+0xac>
    165c:	69 c0       	rjmp	.+210    	; 0x1730 <vTaskIncrementTick+0x17e>
    165e:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <pxDelayedTaskList>
    1662:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    1666:	80 81       	ld	r24, Z
    1668:	88 23       	and	r24, r24
    166a:	99 f0       	breq	.+38     	; 0x1692 <vTaskIncrementTick+0xe0>
    166c:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <pxDelayedTaskList>
    1670:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    1674:	05 80       	ldd	r0, Z+5	; 0x05
    1676:	f6 81       	ldd	r31, Z+6	; 0x06
    1678:	e0 2d       	mov	r30, r0
    167a:	c6 81       	ldd	r28, Z+6	; 0x06
    167c:	d7 81       	ldd	r29, Z+7	; 0x07
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	9b 81       	ldd	r25, Y+3	; 0x03
    1682:	20 91 97 09 	lds	r18, 0x0997	; 0x800997 <xTickCount>
    1686:	30 91 98 09 	lds	r19, 0x0998	; 0x800998 <xTickCount+0x1>
    168a:	28 17       	cp	r18, r24
    168c:	39 07       	cpc	r19, r25
    168e:	f8 f4       	brcc	.+62     	; 0x16ce <vTaskIncrementTick+0x11c>
    1690:	19 c0       	rjmp	.+50     	; 0x16c4 <vTaskIncrementTick+0x112>
    1692:	8f ef       	ldi	r24, 0xFF	; 255
    1694:	9f ef       	ldi	r25, 0xFF	; 255
    1696:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
    169a:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
    169e:	48 c0       	rjmp	.+144    	; 0x1730 <vTaskIncrementTick+0x17e>
    16a0:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <pxDelayedTaskList>
    16a4:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    16a8:	05 80       	ldd	r0, Z+5	; 0x05
    16aa:	f6 81       	ldd	r31, Z+6	; 0x06
    16ac:	e0 2d       	mov	r30, r0
    16ae:	c6 81       	ldd	r28, Z+6	; 0x06
    16b0:	d7 81       	ldd	r29, Z+7	; 0x07
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	9b 81       	ldd	r25, Y+3	; 0x03
    16b6:	20 91 97 09 	lds	r18, 0x0997	; 0x800997 <xTickCount>
    16ba:	30 91 98 09 	lds	r19, 0x0998	; 0x800998 <xTickCount+0x1>
    16be:	28 17       	cp	r18, r24
    16c0:	39 07       	cpc	r19, r25
    16c2:	28 f4       	brcc	.+10     	; 0x16ce <vTaskIncrementTick+0x11c>
    16c4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <xNextTaskUnblockTime+0x1>
    16c8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <xNextTaskUnblockTime>
    16cc:	31 c0       	rjmp	.+98     	; 0x1730 <vTaskIncrementTick+0x17e>
    16ce:	8e 01       	movw	r16, r28
    16d0:	0e 5f       	subi	r16, 0xFE	; 254
    16d2:	1f 4f       	sbci	r17, 0xFF	; 255
    16d4:	c8 01       	movw	r24, r16
    16d6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vListRemove>
    16da:	8c 89       	ldd	r24, Y+20	; 0x14
    16dc:	9d 89       	ldd	r25, Y+21	; 0x15
    16de:	89 2b       	or	r24, r25
    16e0:	21 f0       	breq	.+8      	; 0x16ea <vTaskIncrementTick+0x138>
    16e2:	ce 01       	movw	r24, r28
    16e4:	0c 96       	adiw	r24, 0x0c	; 12
    16e6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vListRemove>
    16ea:	8e 89       	ldd	r24, Y+22	; 0x16
    16ec:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <uxTopReadyPriority>
    16f0:	98 17       	cp	r25, r24
    16f2:	10 f4       	brcc	.+4      	; 0x16f8 <vTaskIncrementTick+0x146>
    16f4:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <uxTopReadyPriority>
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	9c 01       	movw	r18, r24
    16fc:	22 0f       	add	r18, r18
    16fe:	33 1f       	adc	r19, r19
    1700:	22 0f       	add	r18, r18
    1702:	33 1f       	adc	r19, r19
    1704:	22 0f       	add	r18, r18
    1706:	33 1f       	adc	r19, r19
    1708:	82 0f       	add	r24, r18
    170a:	93 1f       	adc	r25, r19
    170c:	b8 01       	movw	r22, r16
    170e:	8d 53       	subi	r24, 0x3D	; 61
    1710:	96 4f       	sbci	r25, 0xF6	; 246
    1712:	0e 94 9b 01 	call	0x336	; 0x336 <vListInsertEnd>
    1716:	e0 91 af 09 	lds	r30, 0x09AF	; 0x8009af <pxDelayedTaskList>
    171a:	f0 91 b0 09 	lds	r31, 0x09B0	; 0x8009b0 <pxDelayedTaskList+0x1>
    171e:	80 81       	ld	r24, Z
    1720:	81 11       	cpse	r24, r1
    1722:	be cf       	rjmp	.-132    	; 0x16a0 <vTaskIncrementTick+0xee>
    1724:	b6 cf       	rjmp	.-148    	; 0x1692 <vTaskIncrementTick+0xe0>
    1726:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <uxMissedTicks>
    172a:	8f 5f       	subi	r24, 0xFF	; 255
    172c:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <uxMissedTicks>
    1730:	df 91       	pop	r29
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <xTaskResumeAll>:
    173a:	cf 92       	push	r12
    173c:	df 92       	push	r13
    173e:	ef 92       	push	r14
    1740:	ff 92       	push	r15
    1742:	0f 93       	push	r16
    1744:	1f 93       	push	r17
    1746:	cf 93       	push	r28
    1748:	df 93       	push	r29
    174a:	0f b6       	in	r0, 0x3f	; 63
    174c:	f8 94       	cli
    174e:	0f 92       	push	r0
    1750:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <uxSchedulerSuspended>
    1754:	81 50       	subi	r24, 0x01	; 1
    1756:	80 93 93 09 	sts	0x0993, r24	; 0x800993 <uxSchedulerSuspended>
    175a:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <uxSchedulerSuspended>
    175e:	81 11       	cpse	r24, r1
    1760:	62 c0       	rjmp	.+196    	; 0x1826 <xTaskResumeAll+0xec>
    1762:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <uxCurrentNumberOfTasks>
    1766:	81 11       	cpse	r24, r1
    1768:	32 c0       	rjmp	.+100    	; 0x17ce <xTaskResumeAll+0x94>
    176a:	60 c0       	rjmp	.+192    	; 0x182c <xTaskResumeAll+0xf2>
    176c:	d7 01       	movw	r26, r14
    176e:	15 96       	adiw	r26, 0x05	; 5
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	16 97       	sbiw	r26, 0x06	; 6
    1776:	c6 81       	ldd	r28, Z+6	; 0x06
    1778:	d7 81       	ldd	r29, Z+7	; 0x07
    177a:	ce 01       	movw	r24, r28
    177c:	0c 96       	adiw	r24, 0x0c	; 12
    177e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vListRemove>
    1782:	8e 01       	movw	r16, r28
    1784:	0e 5f       	subi	r16, 0xFE	; 254
    1786:	1f 4f       	sbci	r17, 0xFF	; 255
    1788:	c8 01       	movw	r24, r16
    178a:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vListRemove>
    178e:	8e 89       	ldd	r24, Y+22	; 0x16
    1790:	90 91 95 09 	lds	r25, 0x0995	; 0x800995 <uxTopReadyPriority>
    1794:	98 17       	cp	r25, r24
    1796:	10 f4       	brcc	.+4      	; 0x179c <xTaskResumeAll+0x62>
    1798:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <uxTopReadyPriority>
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	9c 01       	movw	r18, r24
    17a0:	22 0f       	add	r18, r18
    17a2:	33 1f       	adc	r19, r19
    17a4:	22 0f       	add	r18, r18
    17a6:	33 1f       	adc	r19, r19
    17a8:	22 0f       	add	r18, r18
    17aa:	33 1f       	adc	r19, r19
    17ac:	82 0f       	add	r24, r18
    17ae:	93 1f       	adc	r25, r19
    17b0:	b8 01       	movw	r22, r16
    17b2:	8d 53       	subi	r24, 0x3D	; 61
    17b4:	96 4f       	sbci	r25, 0xF6	; 246
    17b6:	0e 94 9b 01 	call	0x336	; 0x336 <vListInsertEnd>
    17ba:	e0 91 e7 09 	lds	r30, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    17be:	f0 91 e8 09 	lds	r31, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    17c2:	9e 89       	ldd	r25, Y+22	; 0x16
    17c4:	86 89       	ldd	r24, Z+22	; 0x16
    17c6:	98 17       	cp	r25, r24
    17c8:	58 f0       	brcs	.+22     	; 0x17e0 <xTaskResumeAll+0xa6>
    17ca:	dc 2c       	mov	r13, r12
    17cc:	09 c0       	rjmp	.+18     	; 0x17e0 <xTaskResumeAll+0xa6>
    17ce:	d1 2c       	mov	r13, r1
    17d0:	0f 2e       	mov	r0, r31
    17d2:	f4 ea       	ldi	r31, 0xA4	; 164
    17d4:	ef 2e       	mov	r14, r31
    17d6:	f9 e0       	ldi	r31, 0x09	; 9
    17d8:	ff 2e       	mov	r15, r31
    17da:	f0 2d       	mov	r31, r0
    17dc:	cc 24       	eor	r12, r12
    17de:	c3 94       	inc	r12
    17e0:	f7 01       	movw	r30, r14
    17e2:	80 81       	ld	r24, Z
    17e4:	81 11       	cpse	r24, r1
    17e6:	c2 cf       	rjmp	.-124    	; 0x176c <xTaskResumeAll+0x32>
    17e8:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <uxMissedTicks>
    17ec:	88 23       	and	r24, r24
    17ee:	79 f0       	breq	.+30     	; 0x180e <xTaskResumeAll+0xd4>
    17f0:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <uxMissedTicks>
    17f4:	88 23       	and	r24, r24
    17f6:	91 f0       	breq	.+36     	; 0x181c <xTaskResumeAll+0xe2>
    17f8:	dc de       	rcall	.-584    	; 0x15b2 <vTaskIncrementTick>
    17fa:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <uxMissedTicks>
    17fe:	81 50       	subi	r24, 0x01	; 1
    1800:	80 93 92 09 	sts	0x0992, r24	; 0x800992 <uxMissedTicks>
    1804:	80 91 92 09 	lds	r24, 0x0992	; 0x800992 <uxMissedTicks>
    1808:	81 11       	cpse	r24, r1
    180a:	f6 cf       	rjmp	.-20     	; 0x17f8 <xTaskResumeAll+0xbe>
    180c:	07 c0       	rjmp	.+14     	; 0x181c <xTaskResumeAll+0xe2>
    180e:	f1 e0       	ldi	r31, 0x01	; 1
    1810:	df 16       	cp	r13, r31
    1812:	21 f0       	breq	.+8      	; 0x181c <xTaskResumeAll+0xe2>
    1814:	80 91 91 09 	lds	r24, 0x0991	; 0x800991 <xMissedYield>
    1818:	81 30       	cpi	r24, 0x01	; 1
    181a:	39 f4       	brne	.+14     	; 0x182a <xTaskResumeAll+0xf0>
    181c:	10 92 91 09 	sts	0x0991, r1	; 0x800991 <xMissedYield>
    1820:	b0 dc       	rcall	.-1696   	; 0x1182 <vPortYield>
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	03 c0       	rjmp	.+6      	; 0x182c <xTaskResumeAll+0xf2>
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	01 c0       	rjmp	.+2      	; 0x182c <xTaskResumeAll+0xf2>
    182a:	80 e0       	ldi	r24, 0x00	; 0
    182c:	0f 90       	pop	r0
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	1f 91       	pop	r17
    1836:	0f 91       	pop	r16
    1838:	ff 90       	pop	r15
    183a:	ef 90       	pop	r14
    183c:	df 90       	pop	r13
    183e:	cf 90       	pop	r12
    1840:	08 95       	ret

00001842 <vTaskDelay>:
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	ec 01       	movw	r28, r24
    1848:	89 2b       	or	r24, r25
    184a:	99 f0       	breq	.+38     	; 0x1872 <vTaskDelay+0x30>
    184c:	ac de       	rcall	.-680    	; 0x15a6 <vTaskSuspendAll>
    184e:	80 91 97 09 	lds	r24, 0x0997	; 0x800997 <xTickCount>
    1852:	90 91 98 09 	lds	r25, 0x0998	; 0x800998 <xTickCount+0x1>
    1856:	c8 0f       	add	r28, r24
    1858:	d9 1f       	adc	r29, r25
    185a:	80 91 e7 09 	lds	r24, 0x09E7	; 0x8009e7 <pxCurrentTCB>
    185e:	90 91 e8 09 	lds	r25, 0x09E8	; 0x8009e8 <pxCurrentTCB+0x1>
    1862:	02 96       	adiw	r24, 0x02	; 2
    1864:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vListRemove>
    1868:	ce 01       	movw	r24, r28
    186a:	3e dd       	rcall	.-1412   	; 0x12e8 <prvAddCurrentTaskToDelayedList>
    186c:	66 df       	rcall	.-308    	; 0x173a <xTaskResumeAll>
    186e:	81 11       	cpse	r24, r1
    1870:	01 c0       	rjmp	.+2      	; 0x1874 <vTaskDelay+0x32>
    1872:	87 dc       	rcall	.-1778   	; 0x1182 <vPortYield>
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	08 95       	ret

0000187a <prvIdleTask>:
    187a:	0f 2e       	mov	r0, r31
    187c:	fb e9       	ldi	r31, 0x9B	; 155
    187e:	ef 2e       	mov	r14, r31
    1880:	f9 e0       	ldi	r31, 0x09	; 9
    1882:	ff 2e       	mov	r15, r31
    1884:	f0 2d       	mov	r31, r0
    1886:	c3 ec       	ldi	r28, 0xC3	; 195
    1888:	d9 e0       	ldi	r29, 0x09	; 9
    188a:	80 91 9a 09 	lds	r24, 0x099A	; 0x80099a <uxTasksDeleted>
    188e:	88 23       	and	r24, r24
    1890:	41 f1       	breq	.+80     	; 0x18e2 <prvIdleTask+0x68>
    1892:	89 de       	rcall	.-750    	; 0x15a6 <vTaskSuspendAll>
    1894:	d7 01       	movw	r26, r14
    1896:	1c 91       	ld	r17, X
    1898:	50 df       	rcall	.-352    	; 0x173a <xTaskResumeAll>
    189a:	11 23       	and	r17, r17
    189c:	11 f1       	breq	.+68     	; 0x18e2 <prvIdleTask+0x68>
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	f8 94       	cli
    18a2:	0f 92       	push	r0
    18a4:	d7 01       	movw	r26, r14
    18a6:	15 96       	adiw	r26, 0x05	; 5
    18a8:	ed 91       	ld	r30, X+
    18aa:	fc 91       	ld	r31, X
    18ac:	16 97       	sbiw	r26, 0x06	; 6
    18ae:	06 81       	ldd	r16, Z+6	; 0x06
    18b0:	17 81       	ldd	r17, Z+7	; 0x07
    18b2:	c8 01       	movw	r24, r16
    18b4:	02 96       	adiw	r24, 0x02	; 2
    18b6:	0e 94 fd 01 	call	0x3fa	; 0x3fa <vListRemove>
    18ba:	80 91 99 09 	lds	r24, 0x0999	; 0x800999 <uxCurrentNumberOfTasks>
    18be:	81 50       	subi	r24, 0x01	; 1
    18c0:	80 93 99 09 	sts	0x0999, r24	; 0x800999 <uxCurrentNumberOfTasks>
    18c4:	80 91 9a 09 	lds	r24, 0x099A	; 0x80099a <uxTasksDeleted>
    18c8:	81 50       	subi	r24, 0x01	; 1
    18ca:	80 93 9a 09 	sts	0x099A, r24	; 0x80099a <uxTasksDeleted>
    18ce:	0f 90       	pop	r0
    18d0:	0f be       	out	0x3f, r0	; 63
    18d2:	f8 01       	movw	r30, r16
    18d4:	87 89       	ldd	r24, Z+23	; 0x17
    18d6:	90 8d       	ldd	r25, Z+24	; 0x18
    18d8:	0e 94 88 01 	call	0x310	; 0x310 <vPortFree>
    18dc:	c8 01       	movw	r24, r16
    18de:	0e 94 88 01 	call	0x310	; 0x310 <vPortFree>
    18e2:	88 81       	ld	r24, Y
    18e4:	82 30       	cpi	r24, 0x02	; 2
    18e6:	88 f2       	brcs	.-94     	; 0x188a <prvIdleTask+0x10>
    18e8:	4c dc       	rcall	.-1896   	; 0x1182 <vPortYield>
    18ea:	cf cf       	rjmp	.-98     	; 0x188a <prvIdleTask+0x10>

000018ec <vTaskSwitchContext>:
    18ec:	80 91 93 09 	lds	r24, 0x0993	; 0x800993 <uxSchedulerSuspended>
    18f0:	81 11       	cpse	r24, r1
    18f2:	13 c0       	rjmp	.+38     	; 0x191a <vTaskSwitchContext+0x2e>
    18f4:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <uxTopReadyPriority>
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	fc 01       	movw	r30, r24
    18fc:	ee 0f       	add	r30, r30
    18fe:	ff 1f       	adc	r31, r31
    1900:	ee 0f       	add	r30, r30
    1902:	ff 1f       	adc	r31, r31
    1904:	ee 0f       	add	r30, r30
    1906:	ff 1f       	adc	r31, r31
    1908:	8e 0f       	add	r24, r30
    190a:	9f 1f       	adc	r25, r31
    190c:	fc 01       	movw	r30, r24
    190e:	ed 53       	subi	r30, 0x3D	; 61
    1910:	f6 4f       	sbci	r31, 0xF6	; 246
    1912:	80 81       	ld	r24, Z
    1914:	88 23       	and	r24, r24
    1916:	29 f0       	breq	.+10     	; 0x1922 <vTaskSwitchContext+0x36>
    1918:	1b c0       	rjmp	.+54     	; 0x1950 <vTaskSwitchContext+0x64>
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	80 93 91 09 	sts	0x0991, r24	; 0x800991 <xMissedYield>
    1920:	08 95       	ret
    1922:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <uxTopReadyPriority>
    1926:	81 50       	subi	r24, 0x01	; 1
    1928:	80 93 95 09 	sts	0x0995, r24	; 0x800995 <uxTopReadyPriority>
    192c:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <uxTopReadyPriority>
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	fc 01       	movw	r30, r24
    1934:	ee 0f       	add	r30, r30
    1936:	ff 1f       	adc	r31, r31
    1938:	ee 0f       	add	r30, r30
    193a:	ff 1f       	adc	r31, r31
    193c:	ee 0f       	add	r30, r30
    193e:	ff 1f       	adc	r31, r31
    1940:	8e 0f       	add	r24, r30
    1942:	9f 1f       	adc	r25, r31
    1944:	fc 01       	movw	r30, r24
    1946:	ed 53       	subi	r30, 0x3D	; 61
    1948:	f6 4f       	sbci	r31, 0xF6	; 246
    194a:	80 81       	ld	r24, Z
    194c:	88 23       	and	r24, r24
    194e:	49 f3       	breq	.-46     	; 0x1922 <vTaskSwitchContext+0x36>
    1950:	80 91 95 09 	lds	r24, 0x0995	; 0x800995 <uxTopReadyPriority>
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	9c 01       	movw	r18, r24
    1958:	22 0f       	add	r18, r18
    195a:	33 1f       	adc	r19, r19
    195c:	22 0f       	add	r18, r18
    195e:	33 1f       	adc	r19, r19
    1960:	22 0f       	add	r18, r18
    1962:	33 1f       	adc	r19, r19
    1964:	28 0f       	add	r18, r24
    1966:	39 1f       	adc	r19, r25
    1968:	d9 01       	movw	r26, r18
    196a:	ad 53       	subi	r26, 0x3D	; 61
    196c:	b6 4f       	sbci	r27, 0xF6	; 246
    196e:	11 96       	adiw	r26, 0x01	; 1
    1970:	ed 91       	ld	r30, X+
    1972:	fc 91       	ld	r31, X
    1974:	12 97       	sbiw	r26, 0x02	; 2
    1976:	02 80       	ldd	r0, Z+2	; 0x02
    1978:	f3 81       	ldd	r31, Z+3	; 0x03
    197a:	e0 2d       	mov	r30, r0
    197c:	12 96       	adiw	r26, 0x02	; 2
    197e:	fc 93       	st	X, r31
    1980:	ee 93       	st	-X, r30
    1982:	11 97       	sbiw	r26, 0x01	; 1
    1984:	2a 53       	subi	r18, 0x3A	; 58
    1986:	36 4f       	sbci	r19, 0xF6	; 246
    1988:	e2 17       	cp	r30, r18
    198a:	f3 07       	cpc	r31, r19
    198c:	29 f4       	brne	.+10     	; 0x1998 <vTaskSwitchContext+0xac>
    198e:	22 81       	ldd	r18, Z+2	; 0x02
    1990:	33 81       	ldd	r19, Z+3	; 0x03
    1992:	fd 01       	movw	r30, r26
    1994:	32 83       	std	Z+2, r19	; 0x02
    1996:	21 83       	std	Z+1, r18	; 0x01
    1998:	fc 01       	movw	r30, r24
    199a:	ee 0f       	add	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	ee 0f       	add	r30, r30
    19a0:	ff 1f       	adc	r31, r31
    19a2:	ee 0f       	add	r30, r30
    19a4:	ff 1f       	adc	r31, r31
    19a6:	8e 0f       	add	r24, r30
    19a8:	9f 1f       	adc	r25, r31
    19aa:	fc 01       	movw	r30, r24
    19ac:	ed 53       	subi	r30, 0x3D	; 61
    19ae:	f6 4f       	sbci	r31, 0xF6	; 246
    19b0:	01 80       	ldd	r0, Z+1	; 0x01
    19b2:	f2 81       	ldd	r31, Z+2	; 0x02
    19b4:	e0 2d       	mov	r30, r0
    19b6:	86 81       	ldd	r24, Z+6	; 0x06
    19b8:	97 81       	ldd	r25, Z+7	; 0x07
    19ba:	90 93 e8 09 	sts	0x09E8, r25	; 0x8009e8 <pxCurrentTCB+0x1>
    19be:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <pxCurrentTCB>
    19c2:	08 95       	ret

000019c4 <__udivmodqi4>:
    19c4:	99 1b       	sub	r25, r25
    19c6:	79 e0       	ldi	r23, 0x09	; 9
    19c8:	04 c0       	rjmp	.+8      	; 0x19d2 <__udivmodqi4_ep>

000019ca <__udivmodqi4_loop>:
    19ca:	99 1f       	adc	r25, r25
    19cc:	96 17       	cp	r25, r22
    19ce:	08 f0       	brcs	.+2      	; 0x19d2 <__udivmodqi4_ep>
    19d0:	96 1b       	sub	r25, r22

000019d2 <__udivmodqi4_ep>:
    19d2:	88 1f       	adc	r24, r24
    19d4:	7a 95       	dec	r23
    19d6:	c9 f7       	brne	.-14     	; 0x19ca <__udivmodqi4_loop>
    19d8:	80 95       	com	r24
    19da:	08 95       	ret

000019dc <__tablejump2__>:
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	00 24       	eor	r0, r0
    19e2:	00 1c       	adc	r0, r0
    19e4:	0b be       	out	0x3b, r0	; 59
    19e6:	07 90       	elpm	r0, Z+
    19e8:	f6 91       	elpm	r31, Z
    19ea:	e0 2d       	mov	r30, r0
    19ec:	09 94       	ijmp

000019ee <memset>:
    19ee:	dc 01       	movw	r26, r24
    19f0:	01 c0       	rjmp	.+2      	; 0x19f4 <memset+0x6>
    19f2:	6d 93       	st	X+, r22
    19f4:	41 50       	subi	r20, 0x01	; 1
    19f6:	50 40       	sbci	r21, 0x00	; 0
    19f8:	e0 f7       	brcc	.-8      	; 0x19f2 <memset+0x4>
    19fa:	08 95       	ret

000019fc <strncpy>:
    19fc:	fb 01       	movw	r30, r22
    19fe:	dc 01       	movw	r26, r24
    1a00:	41 50       	subi	r20, 0x01	; 1
    1a02:	50 40       	sbci	r21, 0x00	; 0
    1a04:	48 f0       	brcs	.+18     	; 0x1a18 <strncpy+0x1c>
    1a06:	01 90       	ld	r0, Z+
    1a08:	0d 92       	st	X+, r0
    1a0a:	00 20       	and	r0, r0
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <strncpy+0x4>
    1a0e:	01 c0       	rjmp	.+2      	; 0x1a12 <strncpy+0x16>
    1a10:	1d 92       	st	X+, r1
    1a12:	41 50       	subi	r20, 0x01	; 1
    1a14:	50 40       	sbci	r21, 0x00	; 0
    1a16:	e0 f7       	brcc	.-8      	; 0x1a10 <strncpy+0x14>
    1a18:	08 95       	ret

00001a1a <_exit>:
    1a1a:	f8 94       	cli

00001a1c <__stop_program>:
    1a1c:	ff cf       	rjmp	.-2      	; 0x1a1c <__stop_program>
